###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        24/Sep/2018  14:38:05
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\LTC2668.c
#    Command line =  
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\LTC2668.c -lcN
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\ -lb
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\ -o
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\DFB_inc\ -I
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\CMSIS\
#        -I
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\ascii\
#        -I
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\include\
#        -I
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\modbus_port\
#        -I F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\rtu\
#        -I F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\LTC2668.lst
#    Object file  =  
#        F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\LTC2668.o
#
###############################################################################

F:\dfb\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\LTC2668.c
      1          /**
      2            ******************************************************************************
      3            * @file    LTC2668.c  burn in system
      4            * @author  h&h
      5            * @version 
      6            * @date    2018
      7            * @brief   LTC2668 driver
      8            ******************************************************************************
      9          **/ 
     10          
     11          #include "include.h"
     12          
     13          #define  CMD_WRITE_N               0x00  /*Write to input register n*/
     14          #define  CMD_UPDATE_N              0x10  /*Update (power up) DAC register n*/
     15          #define  CMD_WRITE_N_UPDATE_ALL    0x20  /*Write to input register n, update (power-up) all*/
     16          #define  CMD_WRITE_N_UPDATE_N      0x30  /*Write to input register n, update (power-up) */
     17          #define  CMD_POWER_DOWN_N          0x40  /*Power down n*/
     18          #define  CMD_POWER_DOWN_ALL        0x50  /*Power down chip (all DAC's, MUX and reference)*/
     19          #define  CMD_SPAN                  0x60  /*Write span to dac n*/
     20          #define  CMD_CONFIG                0x70  /*Configure reference / toggle*/
     21          #define  CMD_WRITE_ALL             0x80  /*Write to all input registers*/
     22          #define  CMD_UPDATE_ALL            0x90  /*Update all DACs*/
     23          #define  CMD_WRITE_ALL_UPDATE_ALL  0xA0  /*Write to all input reg, update all DACs*/
     24          #define  CMD_MUX                   0xB0  /*Select MUX channel (controlled by 5 LSbs in data word)*/
     25          #define  CMD_TOGGLE_SEL            0xC0  /*Select which DACs can be toggled (via toggle pin or global toggle bit)*/
     26          #define  CMD_GLOBAL_TOGGLE         0xD0  /*Software toggle control via global toggle bit*/
     27          #define  CMD_SPAN_ALL              0xE0  /*Set span for all DACs*/
     28          #define  CMD_NO_OPERATION          0xF0  /*No operation*/
     29          
     30          #define  LTC2668_SPAN_0_TO_5V         0x0000
     31          #define  LTC2668_SPAN_0_TO_10V        0x0001
     32          #define  LTC2668_SPAN_PLUS_MINUS_5V   0x0002
     33          #define  LTC2668_SPAN_PLUS_MINUS_10V  0x0003
     34          #define  LTC2668_SPAN_PLUS_MINUS_2V5  0x0004
     35          
     36          
     37          #define LTC2628_SPI_PORT SPI1
     38          
     39          #define SPI_CS_LTC2668 0x00
     40          #define SPI_CS_NONE    0xFF
     41          #define DRV_SPI_CS_LTC2628() drv_spi_cs(SPI_CS_LTC2668)
     42          #define DRV_SPI_CS_NONE()    drv_spi_cs(SPI_CS_NONE)
     43          
     44          uint16_t ltc2668_au16[16][2] = {0};
     45          
     46          void ltc2628_init(void)
     47          {
     48              LTC2668_Powerdown_all();
     49          
     50          }
     51          void drv_spi_cs(uint8_t dev_id)
     52          {
     53              if(SPI_CS_LTC2668 == dev_id)
     54              {
     55                  GPIO_SetBits(GPIOA,GPIO_Pin_8);
     56                  GPIO_SetBits(GPIOA,GPIO_Pin_9);
     57                  GPIO_SetBits(GPIOA,GPIO_Pin_10);
     58                  GPIO_SetBits(GPIOB,GPIO_Pin_12);
     59                  GPIO_ResetBits(GPIOB,GPIO_Pin_12);
     60              }
     61              else
     62              {
     63                  GPIO_SetBits(GPIOA,GPIO_Pin_8);
     64                  GPIO_SetBits(GPIOA,GPIO_Pin_9);
     65                  GPIO_SetBits(GPIOA,GPIO_Pin_10);
     66                  GPIO_SetBits(GPIOB,GPIO_Pin_12);
     67          
     68              }
     69              Delay_ms(10);
     70          
     71          }
     72          
     73          static uint8_t LTC2668_Spi_command_write(SPI_TypeDef* SPIx, uint16_t * w_data, uint16_t * r_data);
     74          static uint8_t LTC2668_Spi_command_write(SPI_TypeDef* SPIx, uint16_t * w_data, uint16_t * r_data)
     75          {
     76              uint8_t ret = ERROR;
     77              if( ((void *)0 == w_data) || ((void *)0 == r_data) )
     78                  return ERROR;
     79              DRV_SPI_CS_LTC2628();
     80              
     81              ret = drv_spi_access_short(LTC2628_SPI_PORT,*w_data,r_data);
     82              if(SUCCESS == ret )
     83              {
     84                  ret = drv_spi_access_short(LTC2628_SPI_PORT,*(w_data+1),(r_data+1));
     85              }
     86              else
     87              {
     88                  /**/
     89              }
     90              DRV_SPI_CS_NONE();
     91              return ret;
     92              
     93          }
     94          static uint8_t LTC2668_Write_Register(uint8_t reg, uint8_t chan, uint16_t w_data);
     95          static uint8_t LTC2668_Write_Register(uint8_t reg, uint8_t chan, uint16_t w_data)
     96          {
     97              uint8_t ret;
     98              uint16_t wdata[2];
     99              uint16_t *rdata; 
    100          
    101              if(chan > LTC2668_CHANNEL16)
    102                  return ERROR;
    103              rdata = ltc2668_au16[chan];
    104              
    105              wdata[0] = (reg & 0x00F0) | (chan & 0x000F);
    106              wdata[1] = w_data;
    107          
    108              if((void *)0 == rdata)
    109                  return ERROR;
    110          
    111              ret = LTC2668_Spi_command_write(LTC2628_SPI_PORT, wdata, rdata);
    112              return ret;
    113          }
    114          
    115          
    116          uint8_t LTC2668_Write_n(uint16_t chan, uint16_t w_data)
    117          {
    118              uint8_t ret = ERROR;
    119              if(chan > LTC2668_CHANNEL16)
    120                  return ERROR;
    121          
    122              ret = LTC2668_Write_Register(CMD_WRITE_N, chan, w_data);
    123          
    124              return ret;
    125          }
    126          uint8_t LTC2668_Updata_n(uint16_t chan, uint16_t w_data)
    127          {
    128               uint8_t ret = ERROR;
    129               if(chan > LTC2668_CHANNEL16)
    130                   return ERROR;
    131          
    132               ret = LTC2668_Write_Register(CMD_UPDATE_N, chan, w_data);
    133          
    134               return ret;
    135          }
    136          uint8_t LTC2668_Write_n_Updata_n(uint16_t chan, uint16_t w_data)
    137          {
    138              uint8_t ret = ERROR;
    139              if(chan > LTC2668_CHANNEL16)
    140                  return ERROR;
    141          
    142              ret = LTC2668_Write_Register(CMD_WRITE_N_UPDATE_N, chan, w_data);
    143          
    144              return ret;
    145          }
    146          uint8_t LTC2668_Write_all(uint16_t w_data)
    147          {
    148              uint8_t ret = ERROR;
    149          
    150              ret = LTC2668_Write_Register(CMD_WRITE_ALL, LTC2668_CHANNELNC, w_data);
    151          
    152              return ret;
    153          }
    154          uint8_t LTC2668_Updata_all(uint16_t w_data)
    155          {
    156              uint8_t ret = ERROR;
    157          
    158              ret = LTC2668_Write_Register(CMD_UPDATE_ALL, LTC2668_CHANNELNC, w_data);
    159          
    160              return ret;
    161          }
    162          
    163          
    164          uint8_t LTC2668_Write_all_Updata_all(uint16_t w_data)
    165          {
    166              uint8_t ret = ERROR;
    167          
    168              ret = LTC2668_Write_Register(CMD_WRITE_ALL_UPDATE_ALL, LTC2668_CHANNELNC, w_data);
    169          
    170              return ret;
    171          }
    172          uint8_t LTC2668_Powerdown_n(uint16_t chan)
    173          {
    174               uint8_t ret = ERROR;
    175               if(chan > LTC2668_CHANNEL16)
    176                   return ERROR;
    177          
    178               ret = LTC2668_Write_Register(CMD_POWER_DOWN_N, chan, 0xFFFF);
    179          
    180               return ret;
    181          }
    182          
    183          uint8_t LTC2668_Powerdown_all(void)
    184          {
    185              uint8_t ret = ERROR;
    186          
    187              ret = LTC2668_Write_Register(CMD_POWER_DOWN_ALL, LTC2668_CHANNELNC, 0xFFFF);
    188          
    189              return ret;
    190          }
    191          
    192          
    193          
    194          #ifdef DEBUG_LTC2668
    195          
    196          void drv_spi_cs(uint8_t dev_id)
    197          {
    198              if(SPI_CS_LTC2668 == dev_id)
    199              {
    200                  GPIO_SetBits(GPIOA,GPIO_Pin_8);
    201                  GPIO_SetBits(GPIOA,GPIO_Pin_9);
    202                  GPIO_SetBits(GPIOA,GPIO_Pin_10);
    203                  GPIO_SetBits(GPIOB,GPIO_Pin_12);
    204                  GPIO_ResetBits(GPIOB,GPIO_Pin_12);
    205              }
    206              else
    207              {
    208                  GPIO_SetBits(GPIOA,GPIO_Pin_8);
    209                  GPIO_SetBits(GPIOA,GPIO_Pin_9);
    210                  GPIO_SetBits(GPIOA,GPIO_Pin_10);
    211                  GPIO_SetBits(GPIOB,GPIO_Pin_12);
    212          
    213              }
    214              Delay_ms(10);
    215          
    216          }
    217          static uint16_t ltc2628_code[16] = {0x1234, 0x2345, 0x3456,0xaa55,0x7977,0x304,0x887,0x987,0xf300,0x4646,0x6764,0x1235,0x1313,0x2569,0xddef,0xaa98,};
    218          static uint16_t ltc2628_all= 0x8000;
    219          void test_ltc2628_ini(void)
    220          {
    221              RCC_APB2PeriphClockCmd(RCC_APB2Periph_SPI1, ENABLE);
    222              RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOC, ENABLE);
    223             
    224              GPIO_InitTypeDef GPIO_InitStructure;
    225          #if 1 
    226              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;  
    227              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    228              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
    229              GPIO_Init(GPIOA, &GPIO_InitStructure);
    230              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;  
    231              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    232              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
    233              GPIO_Init(GPIOB, &GPIO_InitStructure);
    234              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_All;  
    235              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    236              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_IN_FLOATING;  
    237              GPIO_Init(GPIOC, &GPIO_InitStructure);
    238              
    239              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5|GPIO_Pin_6|GPIO_Pin_7;  
    240              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;  
    241              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;  
    242              GPIO_Init(GPIOA, &GPIO_InitStructure);  
    243          #endif
    244              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_12;
    245              GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
    246              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    247              GPIO_Init(GPIOB,&GPIO_InitStructure);
    248          
    249              GPIO_InitStructure.GPIO_Pin = GPIO_Pin_8| GPIO_Pin_9| GPIO_Pin_10;  
    250              GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    251              GPIO_Init(GPIOA, &GPIO_InitStructure);
    252          
    253          
    254              SPI_InitTypeDef   SPI_InitStructure;
    255              SPI_InitStructure.SPI_Direction = SPI_Direction_2Lines_FullDuplex;  
    256              SPI_InitStructure.SPI_Mode = SPI_Mode_Master;  
    257              SPI_InitStructure.SPI_DataSize = SPI_DataSize_16b;  
    258              SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;  
    259              SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;  
    260              //  SPI_InitStructure.SPI_CPOL = SPI_CPOL_Low;
    261              //  SPI_InitStructure.SPI_CPHA = SPI_CPHA_1Edge;
    262              SPI_InitStructure.SPI_NSS = SPI_NSS_Soft;  
    263              SPI_InitStructure.SPI_BaudRatePrescaler = SPI_BaudRatePrescaler_256;  
    264              SPI_InitStructure.SPI_FirstBit = SPI_FirstBit_MSB;  
    265              SPI_InitStructure.SPI_CRCPolynomial = 7;  
    266              SPI_Init(SPI1, &SPI_InitStructure);  
    267              SPI_Cmd(SPI1, ENABLE); 
    268          }
    269          void test_ltc2668(void)
    270          {
    271          #if 0
    272              uint8_t i;
    273              for(i=0; i<(LTC2668_CHANNEL16+1); i++)
    274              {
    275                  LTC2668_Write_n_Updata_n(i, ltc2628_code[i]);
    276                  Delay_ms(10);
    277              }
    278              for(i=0; i<(LTC2668_CHANNEL16+1); i++)
    279              {
    280                  LTC2668_Write_n_Updata_n(i, 0);
    281                  Delay_ms(10);
    282              }
    283              for(i=0; i<(LTC2668_CHANNEL16+1); i++)
    284              {
    285                  LTC2668_Write_n_Updata_n(i, ltc2628_code[i]);
    286                  Delay_ms(10);
    287              }
    288              for(i=0; i<(LTC2668_CHANNEL16+1); i++)
    289              {
    290                  LTC2668_Write_n_Updata_n(i, 0);
    291                  Delay_ms(10);
    292              }
    293              for(i=0; i<(LTC2668_CHANNEL16+1); i++)
    294              {
    295                  LTC2668_Powerdown_n(i);
    296                  Delay_ms(10);
    297                  LTC2668_Powerdown_n(i);
    298              }
    299          #endif
    300               uint8_t i;
    301              for(i=0; i<8; i++)
    302              {
    303                  LTC2668_Write_n_Updata_n(i, ltc2628_all);
    304                  Delay_ms(10);
    305              }
    306              for(i=8; i<(LTC2668_CHANNEL16+1); i++)
    307              {
    308                  LTC2668_Write_n_Updata_n(i, ltc2628_all);
    309                  Delay_ms(10);
    310              }
    311          #if 0
    312              Delay_ms(10);
    313              LTC2668_Write_all_Updata_all(ltc2628_all);
    314              Delay_ms(10);
    315              LTC2668_Powerdown_all();
    316              #endif
    317          }
    318          #endif

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   LTC2668_Powerdown_all
         8   -> LTC2668_Write_Register
      16   LTC2668_Powerdown_n
        16   -> LTC2668_Write_Register
      24   LTC2668_Spi_command_write
        24   -> drv_spi_access_short
        24   -> drv_spi_cs
      16   LTC2668_Updata_all
        16   -> LTC2668_Write_Register
      16   LTC2668_Updata_n
        16   -> LTC2668_Write_Register
      32   LTC2668_Write_Register
        32   -> LTC2668_Spi_command_write
      16   LTC2668_Write_all
        16   -> LTC2668_Write_Register
      16   LTC2668_Write_all_Updata_all
        16   -> LTC2668_Write_Register
      16   LTC2668_Write_n
        16   -> LTC2668_Write_Register
      16   LTC2668_Write_n_Updata_n
        16   -> LTC2668_Write_Register
       8   drv_spi_cs
         8   -> Delay_ms
         8   -> GPIO_ResetBits
         8   -> GPIO_SetBits
       8   ltc2628_init
         8   -> LTC2668_Powerdown_all


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable2
       4  ??DataTable2_1
       4  ??DataTable2_2
       4  ??DataTable2_3
      24  LTC2668_Powerdown_all
      38  LTC2668_Powerdown_n
      70  LTC2668_Spi_command_write
      26  LTC2668_Updata_all
      40  LTC2668_Updata_n
      84  LTC2668_Write_Register
      26  LTC2668_Write_all
      26  LTC2668_Write_all_Updata_all
      40  LTC2668_Write_n
      40  LTC2668_Write_n_Updata_n
     110  drv_spi_cs
       8  ltc2628_init
      64  ltc2668_au16

 
  64 bytes in section .bss
 548 bytes in section .text
 
 548 bytes of CODE memory
  64 bytes of DATA memory

Errors: none
Warnings: none
