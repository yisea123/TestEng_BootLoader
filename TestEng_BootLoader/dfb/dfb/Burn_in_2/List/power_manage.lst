###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        30/Mar/2019  15:46:37
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\power_manage.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\power_manage.c
#        -lcN
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -lb
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -o
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\DFB_inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\power_manage.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\power_manage.o
#
###############################################################################

F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\power_manage.c
      1          /**
      2            ******************************************************************************
      3            * @file    power_manage.c  burn in system
      4            * @author  h&h
      5            * @version 
      6            * @date    
      7            * @brief  manage power system
      8          
      9            ******************************************************************************
     10          **/ 
     11          
     12          #include "include.h"
     13          
     14          volatile uint16_t globle_flag_power_status=0;
     15          volatile uint16_t globle_flag_dfb_current_status=0;
     16          volatile uint16_t globle_flag_dfb_voltage_status=0;
     17          
     18          
     19          /******************************************************************************
     20            * @brief   all_sys_power_on()
     21            * @param  None
     22            * @retval None
     23            * @Description  power on +-5v  3.3v for current source  4 voltage source
     24                            set gloable flags for power status
     25                            
     26          */
     27          void all_sys_power_on(void)
     28          {
     29              set_power_status(P_N_5V_ON | CURRENT_SOURCE_3V3_ON | ALL_2974_CH_ON);
     30          
     31          }
     32          
     33          
     34          /******************************************************************************
     35            * @brief   all_sys_power_off()
     36            * @param  None
     37            * @retval None
     38            * @Description  power off +-5v  3.3v for current source  4 voltage source
     39                            clear gloable flags for power status
     40                            
     41          **/
     42          void all_sys_power_off(void)
     43          {
     44            clear_power_status(P_N_5V_ON | CURRENT_SOURCE_3V3_ON | ALL_2974_CH_ON);
     45          }
     46          
     47          
     48          /******************************************************************************
     49            * @brief   check_power_status()
     50            * @param  None
     51            * @retval None
     52            * @Description  check if the power is on
     53                            
     54          **/
     55          __ramfunc uint8_t check_power_status(uint16_t power_kind)
     56          {
     57              if(globle_flag_power_status & power_kind)
     58                  return SUCCESS;
     59              else
     60                  return ERROR;
     61          }
     62          /******************************************************************************
     63            * @brief   set_power_status()
     64            * @param  None
     65            * @retval None
     66            * @Description  set power status
     67                            
     68          **/
     69          __ramfunc void set_power_status(uint16_t power_kind)
     70          {
     71              globle_flag_power_status |=power_kind;
     72          }
     73          
     74          /******************************************************************************
     75            * @brief   clear_power_status()
     76            * @param  None
     77            * @retval None
     78            * @Description  set power status
     79                            
     80          **/
     81          __ramfunc void clear_power_status(uint16_t power_kind)
     82          {
     83              globle_flag_power_status &=(~power_kind);
     84          }
     85          
     86          
     87          
     88          /******************************************************************************
     89            * @brief   check_current_source_status()
     90            * @param  None
     91            * @retval None
     92            * @Description 
     93                            
     94          **/
     95          __ramfunc uint8_t check_current_source_status(uint16_t dfb_current_ch)
     96          {
     97            if(globle_flag_dfb_current_status & dfb_current_ch)
     98              return SUCCESS;
     99            else
    100              return ERROR;
    101          }
    102          /******************************************************************************
    103            * @brief   set_current_source_status()
    104            * @param  None
    105            * @retval None
    106            * @Description  set power status
    107                            
    108          **/
    109          __ramfunc void set_current_source_status(uint16_t dfb_current_ch)
    110          {
    111            globle_flag_dfb_current_status |=dfb_current_ch;
    112          }
    113          /******************************************************************************
    114            * @brief   clear_current_source_status()
    115            * @param  None
    116            * @retval None
    117            * @Description  
    118                            
    119          **/
    120          __ramfunc void clear_current_source_status(uint16_t dfb_current_ch)
    121          {
    122            globle_flag_dfb_current_status &= (~dfb_current_ch);
    123          }
    124          
    125          /******************************************************************************
    126            * @brief   check_voltage_source_status()
    127            * @param  None
    128            * @retval None
    129            * @Description 
    130                            
    131          **/
    132          __ramfunc uint8_t check_voltage_source_status(uint16_t dfb_voltage_ch)
    133          {
    134            if(globle_flag_dfb_voltage_status & dfb_voltage_ch)
    135              return SUCCESS;
    136            else
    137              return ERROR;
    138          }
    139          /******************************************************************************
    140            * @brief   set_voltage_source_status()
    141            * @param  None
    142            * @retval None
    143            * @Description  set power status
    144                            
    145          **/
    146          __ramfunc void set_voltage_source_status(uint16_t dfb_voltage_ch)
    147          {
    148            globle_flag_dfb_voltage_status |=dfb_voltage_ch;
    149          }
    150          /******************************************************************************
    151            * @brief   clear_voltage_source_status()
    152            * @param  None
    153            * @retval None
    154            * @Description  
    155                            
    156          **/
    157          __ramfunc void clear_voltage_source_status(uint16_t dfb_voltage_ch)
    158          {
    159            globle_flag_dfb_voltage_status &=(~dfb_voltage_ch);
    160          }
    161          
    162          /******************* (C) COPYRIGHT 2018 *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   all_sys_power_off
         8   -> clear_power_status
       8   all_sys_power_on
         8   -> set_power_status
       0   check_current_source_status
       0   check_power_status
       0   check_voltage_source_status
       0   clear_current_source_status
       0   clear_power_status
       0   clear_voltage_source_status
       0   set_current_source_status
       0   set_power_status
       0   set_voltage_source_status


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable8
       4  ??DataTable8_1
       4  ??DataTable8_2
      10  all_sys_power_off
      10  all_sys_power_on
      18  check_current_source_status
      18  check_power_status
      18  check_voltage_source_status
      12  clear_current_source_status
      12  clear_power_status
      12  clear_voltage_source_status
       2  globle_flag_dfb_current_status
       2  globle_flag_dfb_voltage_status
       2  globle_flag_power_status
      12  set_current_source_status
      12  set_power_status
      12  set_voltage_source_status

 
   6 bytes in section .bss
  20 bytes in section .text
 138 bytes in section .textrw
 
 158 bytes of CODE memory
   6 bytes of DATA memory

Errors: none
Warnings: none
