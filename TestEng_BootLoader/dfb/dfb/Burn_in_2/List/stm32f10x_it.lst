###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        30/Mar/2019  15:46:41
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\Libraries\CMSIS\stm32f10x_it.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\Libraries\CMSIS\stm32f10x_it.c
#        -lcN
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -lb
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -o
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\DFB_inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\stm32f10x_it.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\stm32f10x_it.o
#
###############################################################################

F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\Libraries\CMSIS\stm32f10x_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    irq.c  burn in system
      4            * @author  h&h
      5            * @version 
      6            * @date    
      7            * @brief
      8          
      9            ******************************************************************************
     10          **/ 
     11          
     12          #include "include.h"
     13          
     14          /*******************************************************************************
     15          * Function Name  : USART2_IRQHandler
     16          * Description    : 
     17          * Input          : None
     18          * Output         : None
     19          * Return         : None
     20          *******************************************************************************/
     21          #if 0
     22          void USART2_IRQHandler(void)
     23          {
     24              /*clear USART_IT_RXNE flag*/
     25              USART2->SR &= (uint16_t)~USART_IT_RXNE;
     26              uint8_t current_byte;
     27              /*get current received data*/
     28              current_byte=USART2->DR;
     29              uart_isr(current_byte);
     30          }
     31          #endif
     32          
     33          /*******************************************************************************
     34          * Function Name  : EXTI9_5_IRQHandler
     35          * Description    : 
     36          * Input          : None
     37          * Output         : None
     38          * Return         : None
     39          *******************************************************************************/
     40          void EXTI9_5_IRQHandler(void)
     41          {
     42              EXTI_ClearITPendingBit(EXTI_Line5);
     43              if(Get_test_n())
     44              {
     45                  Disable_sw_vs1();
     46              }
     47          }
     48          
     49          
     50          /*******************************************************************************
     51          * Function Name  : TIM2_IRQHandler
     52          * Description    : 
     53          * Input          : None
     54          * Output         : None
     55          * Return         : None
     56          *******************************************************************************/
     57          void TIM2_IRQHandler(void)
     58          {
     59               
     60               TIM_ClearFlag(TIM2, TIM_FLAG_Update);
     61          }
     62          /*******************************************************************************
     63          * Function Name  : NMI_Handler
     64          * Description    : This function handles NMI exception.
     65          * Input          : None
     66          * Output         : None
     67          * Return         : None
     68          *******************************************************************************/
     69          void NMI_Handler(void)
     70          {
     71          }
     72          
     73          /*******************************************************************************
     74          * Function Name  : HardFault_Handler
     75          * Description    : This function handles Hard Fault exception.
     76          * Input          : None
     77          * Output         : None
     78          * Return         : None
     79          *******************************************************************************/
     80          void HardFault_Handler(void)
     81          {
     82            /* Go to infinite loop when Hard Fault exception occurs */
     83            while (1)
     84            {
     85            }
     86          }
     87          
     88          /*******************************************************************************
     89          * Function Name  : MemManage_Handler
     90          * Description    : This function handles Memory Manage exception.
     91          * Input          : None
     92          * Output         : None
     93          * Return         : None
     94          *******************************************************************************/
     95          void MemManage_Handler(void)
     96          {
     97            /* Go to infinite loop when Memory Manage exception occurs */
     98            while (1)
     99            {
    100            }
    101          }
    102          
    103          /*******************************************************************************
    104          * Function Name  : BusFault_Handler
    105          * Description    : This function handles Bus Fault exception.
    106          * Input          : None
    107          * Output         : None
    108          * Return         : None
    109          *******************************************************************************/
    110          void BusFault_Handler(void)
    111          {
    112            /* Go to infinite loop when Bus Fault exception occurs */
    113            while (1)
    114            {
    115            }
    116          }
    117          
    118          /*******************************************************************************
    119          * Function Name  : UsageFault_Handler
    120          * Description    : This function handles Usage Fault exception.
    121          * Input          : None
    122          * Output         : None
    123          * Return         : None
    124          *******************************************************************************/
    125          void UsageFault_Handler(void)
    126          {
    127            /* Go to infinite loop when Usage Fault exception occurs */
    128            while (1)
    129            {
    130            }
    131          }
    132          
    133          /*******************************************************************************
    134          * Function Name  : SVC_Handler
    135          * Description    : This function handles SVCall exception.
    136          * Input          : None
    137          * Output         : None
    138          * Return         : None
    139          *******************************************************************************/
    140          void SVC_Handler(void)
    141          {
    142          }
    143          
    144          /*******************************************************************************
    145          * Function Name  : DebugMon_Handler
    146          * Description    : This function handles Debug Monitor exception.
    147          * Input          : None
    148          * Output         : None
    149          * Return         : None
    150          *******************************************************************************/
    151          void DebugMon_Handler(void)
    152          {
    153          }
    154          
    155          /*******************************************************************************
    156          * Function Name  : PendSV_Handler
    157          * Description    : This function handles PendSVC exception.
    158          * Input          : None
    159          * Output         : None
    160          * Return         : None
    161          *******************************************************************************/
    162          void PendSV_Handler(void)
    163          {
    164          }
    165          
    166          /*******************************************************************************
    167          * Function Name  : SysTick_Handler
    168          * Description    : This function handles SysTick Handler.
    169          * Input          : None
    170          * Output         : None
    171          * Return         : None
    172          *******************************************************************************/
    173          #if 0
    174          void SysTick_Handler(void)
    175          {
    176          
    177          }
    178          #endif
    179          /*******************************************************************************
    180          * Function Name  : RTC_IRQHandler
    181          * Description    : This function handles RTC global interrupt request.
    182          * Input          : None
    183          * Output         : None
    184          * Return         : None
    185          *******************************************************************************/
    186          void RTC_IRQHandler(void)
    187          {
    188           
    189          }
    190          
    191          
    192          /*******************************************************************************
    193          * Function Name  : SPI2_IRQHandler
    194          * Description    : This function handles SPI2 global interrupt request.
    195          * Input          : None
    196          * Output         : None
    197          * Return         : None
    198          *******************************************************************************/
    199          void SPI2_IRQHandler(void)
    200          {
    201          
    202          }
    203          
    204          /*******************************************************************************
    205          * Function Name  : SPI2_IRQHandler
    206          * Description    : This function handles SPI2 global interrupt request.
    207          * Input          : None
    208          * Output         : None
    209          * Return         : None
    210          *******************************************************************************/
    211          void I2C1_ER_IRQHandler(void)
    212          {
    213            
    214          }
    215          
    216          
    217          
    218          
    219          /*******************************************************************************
    220          * Function Name  : RTCAlarm_IRQHandler
    221          * Description    : This function handles RTC Alarm interrupt request.
    222          * Input          : None
    223          * Output         : None
    224          * Return         : None
    225          *******************************************************************************/
    226          void RTCAlarm_IRQHandler(void)
    227          {
    228            
    229          }
    230          
    231          
    232          
    233          
    234          /******************* (C) COPYRIGHT 2018 *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       8   EXTI9_5_IRQHandler
         8   -> Disable_sw_vs1
         8   -> EXTI_ClearITPendingBit
         8   -> Get_test_n
       0   HardFault_Handler
       0   I2C1_ER_IRQHandler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   RTCAlarm_IRQHandler
       0   RTC_IRQHandler
       0   SPI2_IRQHandler
       0   SVC_Handler
       8   TIM2_IRQHandler
         8   -> TIM_ClearFlag
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  BusFault_Handler
       2  DebugMon_Handler
      22  EXTI9_5_IRQHandler
       2  HardFault_Handler
       2  I2C1_ER_IRQHandler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  RTCAlarm_IRQHandler
       2  RTC_IRQHandler
       2  SPI2_IRQHandler
       2  SVC_Handler
      14  TIM2_IRQHandler
       2  UsageFault_Handler

 
 60 bytes in section .text
 
 60 bytes of CODE memory

Errors: none
Warnings: none
