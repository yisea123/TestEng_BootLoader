###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        30/Mar/2019  15:46:36
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\modbus\modbus_port\portserial.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\modbus\modbus_port\portserial.c
#        -lcN
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -lb
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -o
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\DFB_inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\portserial.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\portserial.o
#
###############################################################################

F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\modbus\modbus_port\portserial.c
      1          /*
      2           * FreeModbus Libary: ATMega168 Port
      3           * Copyright (C) 2006 Christian Walter <wolti@sil.at>
      4           *   - Initial version and ATmega168 support
      5           * Modfications Copyright (C) 2006 Tran Minh Hoang:
      6           *   - ATmega8, ATmega16, ATmega32 support
      7           *   - RS485 support for DS75176
      8           *
      9           * This library is free software; you can redistribute it and/or
     10           * modify it under the terms of the GNU Lesser General Public
     11           * License as published by the Free Software Foundation; either
     12           * version 2.1 of the License, or (at your option) any later version.
     13           *
     14           * This library is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     16           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     17           * Lesser General Public License for more details.
     18           *
     19           * You should have received a copy of the GNU Lesser General Public
     20           * License along with this library; if not, write to the Free Software
     21           * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     22           *
     23           * File: $Id: portserial.c,v 1.6 2006/09/17 16:45:53 wolti Exp $
     24           */
     25          
     26          #include "include.h"
     27          
     28          
     29          #include "port.h"
     30          
     31          /* ----------------------- Modbus includes ----------------------------------*/
     32          #include "mb.h"
     33          #include "mbport.h"
     34          
     35          #define MB_USART_PORT USART1
     36          BOOL xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
     37          {
     38              return TRUE;
     39          
     40          }
     41          void vMBPortClose( void )
     42          {
     43              vMBPortSerialEnable(0,0);
     44          }
     45          
     46          
     47          void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
     48          {
     49              if(xRxEnable)
     50              {
     51                  Enable_usart_rx();
     52                  USART_ITConfig(MB_USART_PORT, USART_IT_RXNE, ENABLE);
     53                  
     54              }
     55              else
     56              {
     57                  Disable_usart_rx();
     58                  USART_ITConfig(MB_USART_PORT, USART_IT_RXNE, DISABLE); 
     59                  
     60              }
     61          
     62              if(xTxEnable)
     63              {
     64                  Enable_usart_tx();
     65                  USART_ITConfig(MB_USART_PORT, USART_IT_TXE, ENABLE);
     66                  
     67              }
     68              else
     69              {
     70                  Delay_ms(5);
     71                  Disable_usart_tx();
     72                  USART_ITConfig(MB_USART_PORT, USART_IT_TXE, DISABLE);
     73              }
     74          
     75          }
     76          
     77          
     78          BOOL xMBPortSerialPutByte( CHAR ucByte )
     79          {
     80              USART_SendData(MB_USART_PORT, ucByte);
     81              return TRUE;
     82          }
     83          BOOL xMBPortSerialGetByte( CHAR * pucByte )
     84          {
     85              *pucByte = USART_ReceiveData(MB_USART_PORT);
     86              return TRUE;
     87          }
     88          
     89          
     90          static void prvvUARTTxReadyISR( void )
     91          {
     92              pxMBFrameCBTransmitterEmpty();
     93          }
     94          
     95          static void prvvUARTRxISR( void )
     96          {
     97              pxMBFrameCBByteReceived();
     98          }
     99          
    100          void USART1_IRQHandler(void)
    101          {
    102          
    103              if(USART_GetITStatus(MB_USART_PORT, USART_IT_RXNE) == SET)
    104              {
    105                  prvvUARTRxISR(); 
    106                  USART_ClearITPendingBit(MB_USART_PORT, USART_IT_RXNE); 
    107              }
    108          
    109              if(USART_GetITStatus(MB_USART_PORT, USART_IT_TXE) == SET)
    110              {
    111                  prvvUARTTxReadyISR();
    112                  USART_ClearITPendingBit(MB_USART_PORT, USART_IT_TXE);
    113              }
    114          }
    115          
    116          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   USART1_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> prvvUARTRxISR
         8   -> prvvUARTTxReadyISR
       8   prvvUARTRxISR
         8   -- Indirect call
       8   prvvUARTTxReadyISR
         8   -- Indirect call
       8   vMBPortClose
         8   -> vMBPortSerialEnable
      16   vMBPortSerialEnable
        16   -> Delay_ms
        16   -> Disable_usart_rx
        16   -> Disable_usart_tx
        16   -> Enable_usart_rx
        16   -> Enable_usart_tx
        16   -> USART_ITConfig
       8   xMBPortSerialGetByte
         8   -> USART_ReceiveData
       4   xMBPortSerialInit
       8   xMBPortSerialPutByte
         8   -> USART_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable5
       4  ??DataTable5_1
       4  ??DataTable5_2
      60  USART1_IRQHandler
      10  prvvUARTRxISR
      10  prvvUARTTxReadyISR
      12  vMBPortClose
      94  vMBPortSerialEnable
      16  xMBPortSerialGetByte
      10  xMBPortSerialInit
      20  xMBPortSerialPutByte

 
 244 bytes in section .text
 
 244 bytes of CODE memory

Errors: none
Warnings: none
