###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        30/Mar/2019  15:46:31
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\i2c.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\i2c.c
#        -lcN
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -lb
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\
#        -o
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\DFB_inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\List\i2c.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\dfb\Burn_in_2\Obj\i2c.o
#
###############################################################################

F:\FLT\GitHub\TestEng_FL0001A00\TestEng_FL0001A00\dfb\DFB_src\i2c.c
      1          /**
      2            ******************************************************************************
      3            * @file    i2c.c  burn in system
      4            * @author  h&h
      5            * @version 
      6            * @date    2013
      7            * @brief   i2c driver
      8            ******************************************************************************
      9          **/ 
     10          
     11          #include "include.h"
     12          
     13          
     14          // timeout (for 100K I2C_CLK, period is 10us; system run 64MHz; timeout set = 10us)
     15          #define I2C_TIMEOUT           0xFFFF   //  = 640
     16          /* I2C ADD0 mask */
     17          #define OAR1_ADD0_Set           ((uint16_t)0x0001)
     18          #define OAR1_ADD0_Reset         ((uint16_t)0xFFFE)
     19          
     20          
     21          
     22          /******************************************************************************
     23            * @brief  Writes i2c command.
     24            * @param command: device command.
     25            * @param command_data: Command data to be sent to the device,may be empty.
     26            * @param NumByteToWrite: Number of bytes to be sent by the MCU.can be 0/1/2
     27            * @param SlaveAddress: The address of the slave to be addressed by the Master.
     28            * @retval : status.
     29            ***
     30          note:
     31          
     32          
     33          */
     34          
     35          uint8_t I2c_command_write(I2C_TypeDef* I2Cx, unsigned char command,  unsigned short NumByteToWrite, unsigned char SlaveAddress,  unsigned char * w_data)
     36          {
     37               
     38                   __IO uint32_t temp = 0;
     39                   __IO uint16_t timeout = 0;     
     40                   uint8_t exe_result;
     41          
     42                   /*send start*/
     43                   drv_i2c_master_start(I2Cx);
     44                   
     45                  /* Reset the address bit0 for write*/
     46                  SlaveAddress &= OAR1_ADD0_Reset;
     47                  
     48                  /* Send slave address */
     49                  exe_result=send_slaveaddress(I2Cx, SlaveAddress);
     50                  if(exe_result==SUCCESS)
     51                  {
     52                    
     53                    /* Send command */ 
     54                    exe_result=send_command(I2Cx, command);
     55                    if(exe_result==SUCCESS)
     56                    {
     57                      /*if there is data*/
     58                      if(NumByteToWrite)
     59                      {
     60                        /*send data*/
     61                        exe_result=drv_i2c_master_send_data(I2Cx, w_data,NumByteToWrite );
     62                        drv_i2c_master_stop(I2Cx);              
     63                      }  
     64                    }
     65                    else
     66                    {
     67                      drv_i2c_master_stop(I2Cx); 
     68                    }
     69                  }
     70                  else
     71                  {
     72                    drv_i2c_master_stop(I2Cx);    // initiate a STOP
     73                  }
     74                  /* Send STOP condition */
     75                       
     76                  return exe_result;
     77          }
     78                  
     79          
     80          
     81          /******************************************************************************
     82            * @brief  Reads buffer of bytes  from the slave.
     83            * @param data: read data from slave(gOutboundData)
     84            * @param NumByteToRead: Number of bytes to be read by the Master.
     85            * @param Mode: 
     86            * @param SlaveAddress: The address of the slave to be addressed by the Master.
     87            * @retval : status.
     88            */
     89          uint8_t I2c_command_read(I2C_TypeDef* I2Cx, unsigned char command, unsigned short NumByteToRead, unsigned char SlaveAddress,  unsigned char *r_data )
     90          {
     91          
     92            /*only read PMBUS 1/2 byte commands at present, no block read commands used,LTC2974 datasheet*/
     93          
     94          
     95          
     96            __IO uint32_t temp = 0;
     97            __IO uint16_t timeout = 0;
     98                  
     99            uint8_t exe_result=0;
    100          
    101            
    102            /*send start*/
    103            drv_i2c_master_start(I2Cx);
    104            
    105            /* Reset the address bit0 for write*/
    106            SlaveAddress &= OAR1_ADD0_Reset;
    107            
    108            /* Send slave address */
    109            exe_result=send_slaveaddress(I2Cx, SlaveAddress);
    110                  
    111            if( exe_result == SUCCESS )
    112            { 
    113              /* Send command */ 
    114              exe_result=send_command(I2Cx,command);
    115              
    116              if( exe_result == SUCCESS )
    117              { // write data.       
    118                
    119           
    120                drv_i2c_master_start(I2Cx);    // initiate a START
    121          
    122                exe_result = drv_i2c_master_recv_with_stop(I2Cx, SlaveAddress, r_data, NumByteToRead );
    123          
    124              }
    125              else
    126              {
    127                drv_i2c_master_stop(I2Cx);    // initiate a STOP
    128              }
    129            }
    130            else
    131            {
    132              drv_i2c_master_stop(I2Cx);    // initiate a STOP
    133            }
    134            return exe_result;
    135          }
    136          
    137          
    138          
    139          
    140          ////////////////////////////////////////////////////////////////////////////////
    141          // Syntax: void drv_i2c_master_start( void )
    142          // Function: Send I2C START. Check to make sure the START is sent.
    143          // Argument: 
    144          // Return:
    145          ////////////////////////////////////////////////////////////////////////////////
    146          
    147          __ramfunc void drv_i2c_master_start(I2C_TypeDef* I2Cx)
    148          {
    149            unsigned long timeout;
    150            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
    151          
    152            I2Cx->CR1 |= I2C_CR1_START;   // generate START.
    153            
    154            // check SR1 register SB bit (Master mode, bit 0). 
    155            //       SB = 0: No START condition.
    156            //       SB = 1: Start condition generated.
    157            // Normally, 55 loops are needed.
    158            timeout = I2C_TIMEOUT;
    159            while( (I2Cx->SR1 & I2C_SR1_SB ) == 0 && timeout > 0)
    160              timeout--;    // start not sent yet.
    161          }
    162          
    163          #if 0
    164          __ramfunc void drv_i2c_master_start(void)
    165          {
    166            unsigned long timeout;
    167          
    168            I2C1->CR1 |= I2C_CR1_START;   // generate START.
    169            
    170            // check SR1 register SB bit (Master mode, bit 0). 
    171            //       SB = 0: No START condition.
    172            //       SB = 1: Start condition generated.
    173            // Normally, 55 loops are needed.
    174            timeout = I2C_TIMEOUT;
    175            while( (I2C1->SR1 & I2C_SR1_SB ) == 0 && timeout > 0)
    176              timeout--;    // start not sent yet.
    177          }
    178          #endif
    179          ////////////////////////////////////////////////////////////////////////////////
    180          // Syntax: void drv_i2c_master_stop()
    181          // Function: Generate STOP. A delay may apply to generate enough Tbuf time before
    182          //           possible incoming START.
    183          // Argument: 
    184          // Return:
    185          ////////////////////////////////////////////////////////////////////////////////
    186          
    187          __ramfunc void drv_i2c_master_stop(I2C_TypeDef* I2Cx)
    188          {
    189            unsigned long timeout;
    190            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
    191          
    192            I2Cx->CR1 |= I2C_CR1_STOP;   // generate STOP.
    193            
    194            // Check SR2 register MSL and BUSY bits (bit 0 and 1 ) to see if the bus
    195            // is busy and it is in master mode. When the STOP condition is detected,
    196            // both bits should be cleared by hardware.
    197            //      MSL = 1: master mode. 
    198            //      MSL = 0: slave mode.
    199            //      BUSY = 1: communication ongoing on the bus.
    200            //      BUSY = 0: No communication on the bus.
    201            timeout = I2C_TIMEOUT;
    202            while( (I2Cx->CR1 & I2C_CR1_STOP) != 0 && timeout > 0)
    203              timeout--;    // not master or start not sent yet.
    204          }
    205          #if 0
    206          __ramfunc void drv_i2c_master_stop(void)
    207          {
    208            unsigned long timeout;
    209          
    210            I2C1->CR1 |= I2C_CR1_STOP;   // generate STOP.
    211            
    212            // Check SR2 register MSL and BUSY bits (bit 0 and 1 ) to see if the bus
    213            // is busy and it is in master mode. When the STOP condition is detected,
    214            // both bits should be cleared by hardware.
    215            //      MSL = 1: master mode. 
    216            //      MSL = 0: slave mode.
    217            //      BUSY = 1: communication ongoing on the bus.
    218            //      BUSY = 0: No communication on the bus.
    219            timeout = I2C_TIMEOUT;
    220            while( (I2C1->CR1 & I2C_CR1_STOP) != 0 && timeout > 0)
    221              timeout--;    // not master or start not sent yet.
    222          }
    223          #endif
    224          ////////////////////////////////////////////////////////////////////////////////
    225          // Syntax: ErrorStatus send_slaveaddress(uint8_t slaveaddress)
    226          // Function: Set device with read/write attribute.
    227          // Argument: slave address
    228          // Return: number of bytes sent.
    229          ////////////////////////////////////////////////////////////////////////////////
    230          
    231          __ramfunc uint8_t send_slaveaddress(I2C_TypeDef* I2Cx, uint8_t slaveaddress )
    232          {
    233            __IO uint32_t temp = 0;
    234            unsigned long timeout;
    235            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
    236          
    237            I2Cx->DR = slaveaddress;    // send device and read/write request.
    238          
    239            timeout = I2C_TIMEOUT;
    240            // check ADDR bit until it is set by hardware. It is set after ACK.
    241            while(( I2Cx->SR1 & I2C_SR1_ADDR ) == 0 && timeout > 0)
    242            {
    243              if( I2Cx->SR1 & I2C_SR1_AF )
    244              {
    245                I2Cx->SR1 = 0;  // clear Acknowledge Fail.
    246                timeout = 0;
    247              }
    248              else
    249              {
    250                timeout--;  
    251              }
    252            }
    253            
    254            /* Clear ADDR flag by reading SR2 register */
    255            temp = I2Cx->SR2;
    256            
    257            if( timeout == 0 )    // timeout, no need to continue.
    258            {
    259              return ERROR;
    260            } 
    261            
    262            return SUCCESS;
    263          }
    264          #if 0
    265          __ramfunc uint8_t send_slaveaddress(uint8_t slaveaddress )
    266          {
    267            __IO uint32_t temp = 0;
    268            unsigned long timeout;
    269          
    270            I2C1->DR = slaveaddress;    // send device and read/write request.
    271          
    272            timeout = I2C_TIMEOUT;
    273            // check ADDR bit until it is set by hardware. It is set after ACK.
    274            while(( I2C1->SR1 & I2C_SR1_ADDR ) == 0 && timeout > 0)
    275            {
    276              if( I2C1->SR1 & I2C_SR1_AF )
    277              {
    278                I2C1->SR1 = 0;  // clear Acknowledge Fail.
    279                timeout = 0;
    280              }
    281              else
    282              {
    283                timeout--;  
    284              }
    285            }
    286            
    287            /* Clear ADDR flag by reading SR2 register */
    288            temp = I2C1->SR2;
    289            
    290            if( timeout == 0 )    // timeout, no need to continue.
    291            {
    292              return ERROR;
    293            } 
    294            
    295            return SUCCESS;
    296          }
    297          #endif
    298          ////////////////////////////////////////////////////////////////////////////////
    299          // Syntax: ErrorStatus send_command(uint8_t command)
    300          // Function: 
    301          // Argument:
    302          ////////////////////////////////////////////////////////////////////////////////
    303          
    304          __ramfunc uint8_t send_command(I2C_TypeDef* I2Cx,uint8_t command)
    305          {
    306              uint16_t timeout=0; 
    307              I2Cx->DR = command;
    308              assert_param(IS_I2C_ALL_PERIPH(I2Cx));
    309          
    310              /* Poll on BTF to receive data because in polling mode we can not guarantee the
    311                 EV8 software sequence is managed before the current byte transfer completes */
    312              timeout = I2C_TIMEOUT;
    313              while ((I2Cx->SR1 & I2C_SR1_BTF) == 0 && timeout > 0)
    314              {
    315                if( I2Cx->SR1 & I2C_SR1_AF )
    316                { // NACK observed.
    317                  I2Cx->SR1 = 0;  // clear Acknowledge Fail.
    318                  timeout = 0;
    319                }
    320                else
    321                {
    322                  timeout--;
    323                }
    324              }
    325              
    326              if( timeout == 0 )
    327              {
    328                return ERROR;
    329              }
    330              
    331              return SUCCESS;
    332            }
    333          #if 0
    334          __ramfunc uint8_t send_command(uint8_t command)
    335          {
    336              uint16_t timeout=0; 
    337              I2C1->DR = command;
    338          
    339              /* Poll on BTF to receive data because in polling mode we can not guarantee the
    340                 EV8 software sequence is managed before the current byte transfer completes */
    341              timeout = I2C_TIMEOUT;
    342              while ((I2C1->SR1 & I2C_SR1_BTF) == 0 && timeout > 0)
    343              {
    344                if( I2C1->SR1 & I2C_SR1_AF )
    345                { // NACK observed.
    346                  I2C1->SR1 = 0;  // clear Acknowledge Fail.
    347                  timeout = 0;
    348                }
    349                else
    350                {
    351                  timeout--;
    352                }
    353              }
    354              
    355              if( timeout == 0 )
    356              {
    357                return ERROR;
    358              }
    359              return SUCCESS;
    360            }
    361          #endif
    362          ////////////////////////////////////////////////////////////////////////////////
    363          // Syntax: short drv_i2c_master_send_data( unsigned char *tx_buf, 
    364          //                          unsigned char length )
    365          // Function: Send data bytes to I2C slave. This should follow START, device and 
    366          //           address bytes sent already.
    367          // Argument: tx_buf = pointer to the buffer.
    368          //           length = bytes to send
    369          // Return: -1 = ACK failure
    370          //         >=0 = bytes sent.
    371          ////////////////////////////////////////////////////////////////////////////////
    372          
    373          __ramfunc uint8_t drv_i2c_master_send_data( I2C_TypeDef* I2Cx, unsigned char *tx_buf, unsigned short length )
    374          {
    375            unsigned long timeout;
    376            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
    377          
    378            while(length--)
    379            {
    380               /* Send the current byte */
    381              I2Cx->DR = *tx_buf++;
    382              /* Poll on BTF to receive data because in polling mode we can not guarantee the
    383                 EV8 software sequence is managed before the current byte transfer completes */
    384              timeout = I2C_TIMEOUT;
    385              while ((I2Cx->SR1 & I2C_SR1_BTF) == 0 && timeout > 0)
    386              {
    387                if( I2Cx->SR1 & I2C_SR1_AF )
    388                {
    389                  I2Cx->SR1 = 0;  // clear Acknowledge Fail.
    390                  timeout = 0;
    391                }
    392                else
    393                {
    394                  timeout--;
    395                }
    396              }
    397              
    398              if( timeout == 0 )
    399              {
    400                return ERROR;
    401              } 
    402            }
    403            return SUCCESS;
    404          }
    405          #if 0
    406          __ramfunc uint8_t drv_i2c_master_send_data( unsigned char *tx_buf, unsigned char length )
    407          {
    408            unsigned long timeout;
    409          
    410            while(length--)
    411            {
    412               /* Send the current byte */
    413              I2C1->DR = *tx_buf++;
    414              /* Poll on BTF to receive data because in polling mode we can not guarantee the
    415                 EV8 software sequence is managed before the current byte transfer completes */
    416              timeout = I2C_TIMEOUT;
    417              while ((I2C1->SR1 & I2C_SR1_BTF) == 0 && timeout > 0)
    418              {
    419                if( I2C1->SR1 & I2C_SR1_AF )
    420                {
    421                  I2C1->SR1 = 0;  // clear Acknowledge Fail.
    422                  timeout = 0;
    423                }
    424                else
    425                {
    426                  timeout--;
    427                }
    428              }
    429              
    430              if( timeout == 0 )
    431              {
    432                return ERROR;
    433              } 
    434            }
    435            return SUCCESS;
    436          }
    437          #endif
    438          ////////////////////////////////////////////////////////////////////////////////
    439          // Syntax: short drv_i2c_master_recv(unsigned char device, 
    440          //                        unsigned char *rx_buf, unsigned short length )
    441          // Function: Send I2C sequence out to I2C bus.
    442          // Argument: i2c_clock_rate = I2C clock rate. 100000 - 100K
    443          // Return: -1 = ACK failure
    444          //         >=0 = number of bytes read.
    445          ////////////////////////////////////////////////////////////////////////////////
    446          
    447          __ramfunc uint8_t drv_i2c_master_recv_with_stop(I2C_TypeDef* I2Cx, uint8_t device, unsigned char *rx_buf, unsigned short length )
    448          {
    449            __IO uint32_t temp = 0;
    450            unsigned short count;
    451            unsigned long timeout;
    452            unsigned short sr2;
    453            assert_param(IS_I2C_ALL_PERIPH(I2Cx));
    454          
    455            count = 0;
    456            if (length == 1)
    457            {
    458              I2Cx->DR = device | 0x01;    // send address for receiving
    459          
    460              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    461              // check ADDR bit until it is set by hardware.
    462              while(( I2Cx->SR1 & I2C_SR1_ADDR ) == 0 && timeout > 0)
    463              {
    464                if( I2Cx->SR1 & I2C_SR1_AF )
    465                {
    466                  I2Cx->SR1 = 0;  // clear Acknowledge Fail.
    467                  timeout = 0;
    468                }
    469                else
    470                {
    471                  timeout--;  
    472                }
    473              }
    474          
    475              I2Cx->CR1 &= ~I2C_CR1_ACK;
    476              //__disable_irq();
    477              // need to read SR2
    478              temp = I2Cx->SR2;
    479          
    480              if( timeout == 0 )    // timeout, no need to continue.
    481                return ERROR;
    482          
    483              I2Cx->CR1 |= I2C_CR1_STOP;
    484              //__enable_irq();
    485              
    486              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    487              count++;    // assume one byte read
    488              while ((I2Cx->SR1 & I2C_SR1_RXNE) == 0 && timeout > 0)
    489              {
    490                if( I2Cx->SR1 & I2C_SR1_AF )
    491                {
    492                  I2Cx->SR1 = 0;  // clear Acknowledge Fail.
    493                  timeout = 0;
    494                }
    495                else
    496                {
    497                  timeout--;  
    498                }
    499              }
    500                  
    501              /* Read the data */
    502              *rx_buf++ = I2Cx->DR;
    503              /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
    504              while ((I2Cx->CR1&I2C_CR1_STOP) != 0);
    505              /* Enable Acknowledgement to be ready for another reception */
    506              I2Cx->CR1 |= I2C_CR1_ACK;
    507            }
    508            
    509            
    510            else if (length == 2)
    511            {
    512              /* Set POS bit */
    513              I2Cx->CR1 |= I2C_CR1_POS;   // this is required for two byte receiving.
    514              
    515              /* Send slave address */
    516              I2Cx->DR = device | 0x01;    // send address for receiving
    517          
    518              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    519              // check ADDR bit until it is set by hardware.
    520              while(( I2Cx->SR1 & I2C_SR1_ADDR ) == 0 && timeout > 0)
    521              {
    522                if( I2Cx->SR1 & I2C_SR1_AF )
    523                {
    524                  I2Cx->SR1 = 0;  // clear Acknowledge Fail.
    525                  timeout = 0;
    526                }
    527                else
    528                {
    529                  timeout--;  
    530                }
    531              }
    532          
    533              /* EV6_1: The acknowledge disable should be done just after EV6,
    534                 that is after ADDR is cleared, so disable all active IRQs around ADDR clearing and 
    535                 ACK clearing */
    536              __disable_irq();
    537              /* Clear ADDR by reading SR2 register  */
    538              temp = I2Cx->SR2;
    539          
    540              /* Clear ACK */
    541              I2Cx->CR1 &= ~I2C_CR1_ACK;
    542              /*Re-enable IRQs */
    543               __enable_irq();
    544          
    545              if( timeout == 0 )    // timeout, no need to continue.
    546                return ERROR;
    547              
    548              count += 2; // assume two bytes are read.
    549              
    550              /* Wait until BTF is set */
    551              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    552              while ((I2Cx->SR1 & I2C_SR1_BTF) == 0 && timeout > 0 )
    553              {
    554                timeout--;
    555              }
    556              
    557              /* Read first data */
    558              *rx_buf++ = I2Cx->DR;
    559              
    560              /* Re-enable IRQs */
    561              // __enable_irq();
    562              /* Read second data */
    563              *rx_buf++ = I2Cx->DR;
    564          
    565              /* Program the STOP */
    566              I2Cx->CR1 |= I2C_CR1_STOP;
    567              /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
    568              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    569              while ((I2Cx->CR1&I2C_CR1_STOP) != 0 && timeout > 0 )
    570              {
    571                timeout--;
    572              }
    573              
    574              /* Enable Acknowledgement to be ready for another reception */
    575              I2Cx->CR1 |= I2C_CR1_ACK;
    576              /* Clear POS bit */
    577              I2Cx->CR1 &= ~I2C_CR1_POS;
    578            }
    579            else
    580            { // more than two bytes.   
    581              /* Send slave address */
    582              I2Cx->DR = device | 0x01;    // send address for receiving
    583          
    584              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    585              // check ADDR bit until it is set by hardware.
    586              while(( I2Cx->SR1 & I2C_SR1_ADDR ) == 0 && timeout > 0)
    587              {
    588                if( I2Cx->SR1 & I2C_SR1_AF )
    589                {
    590                  I2Cx->SR1 = 0;  // clear Acknowledge Fail.
    591                  timeout = 0;
    592                }
    593                else
    594                {
    595                  timeout--;  
    596                }
    597              }
    598          
    599              /* Clear ADDR by reading SR2 register  */
    600              sr2 = I2Cx->SR2;
    601          
    602              if( timeout == 0 )    // timeout, no need to continue.
    603              {
    604                timeout = sr2;    // dummy statement taht avoid compiler warning "sr2 set but never used".
    605                return ERROR;
    606              }
    607          
    608              /* While there is data to be read */
    609              while (length)
    610              {
    611                /* Receive bytes from first byte until byte N-3 */
    612                if (length != 3)
    613                {
    614                  /* Poll on BTF to receive data because in polling mode we can not guarantee the
    615                     EV7 software sequence is managed before the current byte transfer completes */
    616                  timeout = I2C_TIMEOUT;      // wait until it is sent out.
    617                  while ((I2Cx->SR1 & I2C_SR1_BTF) == 0 && timeout > 0)
    618                  {
    619                    timeout--;  
    620                  }
    621                  
    622                  if( timeout == 0 )    // data can not be sent out. stop and skip the reset.
    623                  {
    624                    length = 0;
    625                    break;
    626                  }
    627                  
    628                  count++;
    629                  /* Read data */
    630                  *rx_buf++ = I2Cx->DR;
    631                  /* Decrement the read bytes counter */
    632                  length--;
    633                }
    634          
    635                /* it remains to read three data: data N-2, data N-1, Data N */
    636                if(length == 3)
    637                {
    638                  /* Wait until BTF is set: Data N-2 in DR and data N -1 in shift register */
    639                  timeout = I2C_TIMEOUT;      // wait until it is sent out.
    640                  while ((I2Cx->SR1 & I2C_SR1_BTF) == 0  && timeout > 0)
    641                  {
    642                    timeout--;  
    643                  }
    644                  
    645                  if( timeout )
    646                  {               // if timeout occurs, there is no need to continue.
    647                    /* Clear ACK */
    648                    I2Cx->CR1 &= ~I2C_CR1_ACK;
    649          
    650                    /* Disable IRQs around data reading and STOP programming because of the
    651                      limitation ? */
    652                    //__disable_irq();
    653                    /* Read Data N-2 */
    654                    *rx_buf++ = I2Cx->DR;
    655                    /* Program the STOP */
    656                    I2Cx->CR1 |= I2C_CR1_STOP;
    657                    /* Read DataN-1 */
    658                    *rx_buf++ = I2Cx->DR;
    659                    /* Re-enable IRQs */
    660                    // __enable_irq();
    661                    /* Wait until RXNE is set (DR contains the last data) */
    662                    timeout = I2C_TIMEOUT;      // wait until it is sent out.
    663                    while ((I2Cx->SR1 & I2C_SR1_RXNE) == 0  && timeout > 0)
    664                    {
    665                      timeout--;  
    666                    }
    667                          
    668                    /* Read DataN */
    669                    *rx_buf++ = I2Cx->DR;
    670                    
    671                    count += 3;
    672                  }
    673                  /* Reset the number of bytes to be read by master */
    674                  length = 0;
    675                }
    676              }
    677              
    678              /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
    679              while ((I2Cx->CR1&I2C_CR1_STOP) == I2C_CR1_STOP);
    680              /* Enable Acknowledgement to be ready for another reception */
    681              I2Cx->CR1 |= I2C_CR1_ACK;
    682            }
    683            
    684            return SUCCESS;
    685          }
    686          #if 0
    687          
    688          __ramfunc uint8_t drv_i2c_master_recv_with_stop(uint8_t device, unsigned char *rx_buf, uint8_t length )
    689          {
    690            __IO uint32_t temp = 0;
    691            unsigned short count;
    692            unsigned long timeout;
    693          
    694            count = 0;
    695            if (length == 1)
    696            {
    697              I2C1->DR = device | 0x01;    // send address for receiving
    698          
    699              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    700              // check ADDR bit until it is set by hardware.
    701              while(( I2C1->SR1 & I2C_SR1_ADDR ) == 0 && timeout > 0)
    702              {
    703                if( I2C1->SR1 & I2C_SR1_AF )
    704                {
    705                  I2C1->SR1 = 0;  // clear Acknowledge Fail.
    706                  timeout = 0;
    707                }
    708                else
    709                {
    710                  timeout--;  
    711                }
    712              }
    713          
    714              I2C1->CR1 &= ~I2C_CR1_ACK;
    715              //__disable_irq();
    716              // need to read SR2
    717              temp = I2C1->SR2;
    718          
    719              if( timeout == 0 )    // timeout, no need to continue.
    720                return ERROR;
    721          
    722              I2C1->CR1 |= I2C_CR1_STOP;
    723              //__enable_irq();
    724              
    725              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    726              count++;    // assume one byte read
    727              while ((I2C1->SR1 & I2C_SR1_RXNE) == 0 && timeout > 0)
    728              {
    729                if( I2C1->SR1 & I2C_SR1_AF )
    730                {
    731                  I2C1->SR1 = 0;  // clear Acknowledge Fail.
    732                  timeout = 0;
    733                }
    734                else
    735                {
    736                  timeout--;  
    737                }
    738              }
    739                  
    740              /* Read the data */
    741              *rx_buf++ = I2C1->DR;
    742              /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
    743              while ((I2C1->CR1&I2C_CR1_STOP) != 0);
    744              /* Enable Acknowledgement to be ready for another reception */
    745              I2C1->CR1 |= I2C_CR1_ACK;
    746            }
    747            
    748            
    749            else if (length == 2)
    750            {
    751              /* Set POS bit */
    752              I2C1->CR1 |= I2C_CR1_POS;   // this is required for two byte receiving.
    753              
    754              /* Send slave address */
    755              I2C1->DR = device | 0x01;    // send address for receiving
    756          
    757              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    758              // check ADDR bit until it is set by hardware.
    759              while(( I2C1->SR1 & I2C_SR1_ADDR ) == 0 && timeout > 0)
    760              {
    761                if( I2C1->SR1 & I2C_SR1_AF )
    762                {
    763                  I2C1->SR1 = 0;  // clear Acknowledge Fail.
    764                  timeout = 0;
    765                }
    766                else
    767                {
    768                  timeout--;  
    769                }
    770              }
    771          
    772              /* EV6_1: The acknowledge disable should be done just after EV6,
    773                 that is after ADDR is cleared, so disable all active IRQs around ADDR clearing and 
    774                 ACK clearing */
    775              __disable_irq();
    776              /* Clear ADDR by reading SR2 register  */
    777              temp = I2C1->SR2;
    778          
    779              /* Clear ACK */
    780              I2C1->CR1 &= ~I2C_CR1_ACK;
    781              /*Re-enable IRQs */
    782               __enable_irq();
    783          
    784              if( timeout == 0 )    // timeout, no need to continue.
    785                return ERROR;
    786              
    787              count += 2; // assume two bytes are read.
    788              
    789              /* Wait until BTF is set */
    790              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    791              while ((I2C1->SR1 & I2C_SR1_BTF) == 0 && timeout > 0 )
    792              {
    793                timeout--;
    794              }
    795              /* Disable IRQs around STOP programming and data reading because of the limitation ?*/
    796              // __disable_irq();
    797              /* Program the STOP */
    798              I2C1->CR1 |= I2C_CR1_STOP;
    799              
    800              /* Read first data */
    801              *rx_buf++ = I2C1->DR;
    802              
    803              /* Re-enable IRQs */
    804              // __enable_irq();
    805              /* Read second data */
    806              *rx_buf++ = I2C1->DR;
    807              
    808              /* Make sure that the STOP bit is cleared by Hardware before CR1 write access */
    809              timeout = I2C_TIMEOUT;      // wait until it is sent out.
    810              while ((I2C1->CR1&I2C_CR1_STOP) != 0 && timeout > 0 )
    811              {
    812                timeout--;
    813              }
    814              
    815              /* Enable Acknowledgement to be ready for another reception */
    816              I2C1->CR1 |= I2C_CR1_ACK;
    817              /* Clear POS bit */
    818              I2C1->CR1 &= ~I2C_CR1_POS;
    819            }
    820            
    821            return SUCCESS;
    822          }
    823          #endif
    824           /******************* (C) COPYRIGHT 2018 *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      40   I2c_command_read
        40   -> drv_i2c_master_recv_with_stop
        40   -> drv_i2c_master_start
        40   -> drv_i2c_master_stop
        40   -> send_command
        40   -> send_slaveaddress
      40   I2c_command_write
        40   -> drv_i2c_master_send_data
        40   -> drv_i2c_master_start
        40   -> drv_i2c_master_stop
        40   -> send_command
        40   -> send_slaveaddress
      20   drv_i2c_master_recv_with_stop
       4   drv_i2c_master_send_data
       0   drv_i2c_master_start
       0   drv_i2c_master_stop
       0   send_command
       4   send_slaveaddress


   Section sizes:

   Bytes  Function/Label
   -----  --------------
     134  I2c_command_read
     132  I2c_command_write
     552  drv_i2c_master_recv_with_stop
      70  drv_i2c_master_send_data
      30  drv_i2c_master_start
      30  drv_i2c_master_stop
      60  send_command
      66  send_slaveaddress

 
 266 bytes in section .text
 808 bytes in section .textrw
 
 1 074 bytes of CODE memory

Errors: none
Warnings: none
