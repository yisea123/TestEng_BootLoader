###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        06/Apr/2019  21:50:28
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\DFB_src\Boot_GetApp_Data.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\DFB_src\Boot_GetApp_Data.c
#        -lcN
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\List\
#        -lb
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\List\
#        -o
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\DFB_inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\List\Boot_GetApp_Data.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\Obj\Boot_GetApp_Data.o
#
###############################################################################

F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\DFB_src\Boot_GetApp_Data.c
      1          /**
      2            ******************************************************************************
      3            * @file    Boot_GetApp_Data.c  burn in system
      4            * @author  h&h
      5            * @version 
      6            * @date    
      7          * @brief  
      8            ******************************************************************************
      9          **/ 
     10          
     11          #include "include.h"
     12          
     13          
     14          #define App_Cfg_Addr_Prolog_Validate(a)  ( ((a)>=(void *)APP_CFG_PROLOG_BASE_ADDR) && ((a)<=(void *)APP_CFG_PROLOG_END_ADDR) )
     15          #define App_Cfg_Addr_Epilog_Validate(a)  ( ((a)>=(void *)APP_CFG_EPILOG_BASE_ADDR) && ((a)<=(void *)APP_CFG_EPILOG_END_ADDR) )
     16          
     17          const uint8_t * App_HardVersion;
     18          const uint8_t * App_FwVersion;
     19          const uint8_t * App_Prolog_Signature;
     20          const App_Cfg_Gpio_st * App_Cfg_Gpio_cpst;
     21          const App_Cfg_Uart_st * App_Cfg_Uart_cpst;
     22          const App_Cfg_Epilog_st * App_Cfg_Epilog_cpst;
     23          const uint8_t * App_Epilog_Signature;
     24          
     25          typedef enum
     26          {
     27              BOOT_GETAPP_NOT_INI,
     28              BOOT_GETAPP_INI
     29          }Boot_GetApp_init_ten;
     30          
     31          static Boot_GetApp_init_ten Boot_GetApp_init_en = BOOT_GETAPP_NOT_INI;
     32          
     33          uint8_t Boot_GetApp_init(void)
     34          {
     35              const App_Cfg_st * const Boot_Cfg_BaseAddr = (const App_Cfg_st *)APP_CFG_PROLOG_BASE_ADDR;
     36              App_St_ten App_St_en;
     37              uint8_t i = 0;
     38              
     39              App_HardVersion        = Boot_Cfg_BaseAddr->app_cfg_hardversion;
     40              App_FwVersion          = Boot_Cfg_BaseAddr->app_cfg_fwversion;
     41              App_Prolog_Signature   = Boot_Cfg_BaseAddr->app_cfg_signature;
     42              App_Cfg_Gpio_cpst      = Boot_Cfg_BaseAddr->app_cfg_gpio_cpcst;
     43              App_Cfg_Uart_cpst      = Boot_Cfg_BaseAddr->app_cfg_uart_cpcst;
     44              App_Cfg_Epilog_cpst    = Boot_Cfg_BaseAddr->app_cfg_epilog_cpcst;
     45          
     46              
     47              if( (App_HardVersion         == (void *) 0)  ||
     48                  (App_FwVersion           == (void *) 0)  ||
     49                  (App_Prolog_Signature    == (void *) 0)  ||
     50                  (App_Cfg_Gpio_cpst       == (void *) 0)  ||
     51                  (App_Cfg_Uart_cpst       == (void *) 0)  ||
     52                  (App_Cfg_Epilog_cpst     == (void *) 0)  )
     53              {
     54                  App_St_en = APP_NOT_EXIST;
     55                  return App_St_en;
     56              }
     57          
     58          
     59              if( (!App_Cfg_Addr_Prolog_Validate(App_HardVersion))         ||
     60                  (!App_Cfg_Addr_Prolog_Validate(App_FwVersion))           ||
     61                  (!App_Cfg_Addr_Prolog_Validate(App_Prolog_Signature))    ||
     62                  (!App_Cfg_Addr_Prolog_Validate(App_Cfg_Gpio_cpst))       ||
     63                  (!App_Cfg_Addr_Prolog_Validate(App_Cfg_Uart_cpst))       ||
     64                  (!App_Cfg_Addr_Epilog_Validate(App_Cfg_Epilog_cpst)) )
     65              {
     66                  App_St_en = APP_PROLOG_EPILOG_ADDR_ERROR;
     67                  return App_St_en;
     68              }
     69              
     70              App_Epilog_Signature = App_Cfg_Epilog_cpst->app_cfg_epilog_signature;
     71          
     72              for(i=0; i<16; i++)
     73              {
     74                  if( *(App_Prolog_Signature + i) !=  *(App_Epilog_Signature + i))
     75                  {
     76                      App_St_en = APP_NOT_COMPLETE;
     77                      return App_St_en;
     78                  }
     79              }
     80          
     81              Boot_GetApp_init_en = BOOT_GETAPP_INI;
     82              return APP_OK;
     83          }
     84          
     85          
     86          
     87          uint8_t Boot_GetApp_HardVersion(uint8_t len, uint8_t * data)
     88          {
     89              uint8_t i;
     90              if(Boot_GetApp_init_en != BOOT_GETAPP_INI)
     91              {
     92                  return ERROR;
     93              }
     94              if(len !=16)
     95              {
     96                  return ERROR;
     97              }
     98              for(i=0; i<16; i++)
     99              {
    100                  *(data + i) = *(App_HardVersion + i);
    101              }
    102              return SUCCESS;
    103          }
    104          
    105          uint8_t Boot_GetApp_FwVersion(uint8_t len, uint8_t * data)
    106          {
    107              uint8_t i;
    108              if(Boot_GetApp_init_en != BOOT_GETAPP_INI)
    109              {
    110                  return ERROR;
    111              }
    112              if(len !=16)
    113              {
    114                  return ERROR;
    115              }
    116              for(i=0; i<16; i++)
    117              {
    118                  *(data + i) = *(App_FwVersion + i);
    119              }
    120              return SUCCESS;
    121          }
    122          
    123          uint8_t Boot_GetApp_Cfg_Gpio(const App_Cfg_Gpio_st * gpio_cfg)
    124          {
    125              if(Boot_GetApp_init_en != BOOT_GETAPP_INI)
    126              {
    127                  return ERROR;
    128              }
    129          
    130              gpio_cfg = App_Cfg_Gpio_cpst;
    131              gpio_cfg = gpio_cfg;
    132              return SUCCESS;
    133          }
    134          
    135          uint8_t Boot_GetApp_Cfg_Uart(const App_Cfg_Uart_st * uart_cfg)
    136          {
    137              if(Boot_GetApp_init_en != BOOT_GETAPP_INI)
    138              {
    139                  return ERROR;
    140              }
    141          
    142              uart_cfg = App_Cfg_Uart_cpst;
    143              uart_cfg = uart_cfg;
    144              return SUCCESS;
    145          }
    146          
    147          
    148          /******************* (C) COPYRIGHT 2018 *****END OF FILE****/
    149           
    150          
    151          
    152          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   Boot_GetApp_Cfg_Gpio
       0   Boot_GetApp_Cfg_Uart
       0   Boot_GetApp_FwVersion
       0   Boot_GetApp_HardVersion
       4   Boot_GetApp_init


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable4
       4  ??DataTable4_1
       4  ??DataTable4_10
       4  ??DataTable4_11
       4  ??DataTable4_2
       4  ??DataTable4_3
       4  ??DataTable4_4
       4  ??DataTable4_5
       4  ??DataTable4_6
       4  ??DataTable4_7
       4  ??DataTable4_8
       4  ??DataTable4_9
       4  App_Cfg_Epilog_cpst
       4  App_Cfg_Gpio_cpst
       4  App_Cfg_Uart_cpst
       4  App_Epilog_Signature
       4  App_FwVersion
       4  App_HardVersion
       4  App_Prolog_Signature
      24  Boot_GetApp_Cfg_Gpio
      24  Boot_GetApp_Cfg_Uart
      54  Boot_GetApp_FwVersion
      54  Boot_GetApp_HardVersion
     296  Boot_GetApp_init
       1  Boot_GetApp_init_en

 
  29 bytes in section .bss
 500 bytes in section .text
 
 500 bytes of CODE memory
  29 bytes of DATA memory

Errors: none
Warnings: none
