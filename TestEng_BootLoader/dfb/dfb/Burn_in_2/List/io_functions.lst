###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        06/Apr/2019  21:50:30
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\DFB_src\io_functions.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\DFB_src\io_functions.c
#        -lcN
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\List\
#        -lb
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\List\
#        -o
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\DFB_inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\List\io_functions.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\dfb\Burn_in_2\Obj\io_functions.o
#
###############################################################################

F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\dfb\DFB_src\io_functions.c
      1          /**
      2            ******************************************************************************
      3            * @file    io_functions.c  burn in system
      4            * @author  h&h
      5            * @version 
      6            * @date    2018
      7            * @brief   io functions
      8            ******************************************************************************
      9          **/ 
     10          
     11          #include "include.h"
     12          
     13          
     14          static uint8_t Io_functions(GPIO_Function_en gpio_func_en, GPIO_Operation_ten gpio_operation_en, uint8_t BitVal)
     15          {
     16              uint8_t ret;
     17              uint8_t i;
     18              uint8_t pin_st_u8 = 0;
     19              uint8_t gpio_pin_num_u8;
     20              const App_Cfg_GpioPin_st * gpio_pin_cpst;
     21              
     22              const App_Cfg_Gpio_st * gpio_cfg = (void *)0;
     23              
     24              ret = Boot_GetApp_Cfg_Gpio(gpio_cfg);
     25          
     26              if(ret == ERROR)
     27                  return 0;
     28          
     29              gpio_pin_num_u8 = gpio_cfg->app_cfg_gpio_num;
     30              gpio_pin_cpst = gpio_cfg->app_cfg_gpio_init_past;
     31          
     32              if( (gpio_pin_num_u8 == 0) || (gpio_pin_cpst == (void *)0) )
     33                  return 0;
     34          
     35              for(i=0; i<gpio_pin_num_u8; i++)
     36              {
     37                  if( (gpio_pin_cpst + i)->app_cfg_gpio_func == gpio_func_en)
     38                  {
     39                      if(gpio_operation_en == GPIO_WRITE)
     40                      {
     41                          GPIO_WriteBit((gpio_pin_cpst + i)->app_cfg_gpio, (gpio_pin_cpst + i)->app_cfg_gpio_pin_st.GPIO_Pin, BitVal);
     42                      }
     43                      else if(gpio_operation_en == GPIO_READ)
     44                      {
     45                          pin_st_u8 = GPIO_ReadInputDataBit((gpio_pin_cpst + i)->app_cfg_gpio, (gpio_pin_cpst + i)->app_cfg_gpio_pin_st.GPIO_Pin);
     46                      }
     47                      else
     48                      {
     49          
     50                      }
     51                  }
     52                  else
     53                  {
     54          
     55                  }
     56                  
     57              }
     58              return pin_st_u8;
     59          }
     60          
     61          inline void Disable_usart_rx(void)
     62          {
     63              Io_functions(GPIO_UART_RX_EN, GPIO_WRITE, 1);
     64          }
     65          
     66          inline void Enable_usart_rx(void)
     67          {
     68              Io_functions(GPIO_UART_RX_EN, GPIO_WRITE, 0);
     69          }
     70          
     71          inline void Disable_usart_tx(void)
     72          {
     73              Io_functions(GPIO_UART_RX_EN, GPIO_WRITE, 1);
     74          }
     75          
     76          inline void Enable_usart_tx(void)
     77          {
     78              Io_functions(GPIO_UART_RX_EN, GPIO_WRITE, 0);
     79          }
     80          
     81          /*get board address according to switches*/
     82          uint8_t Get_board_address(void)
     83          {
     84              uint8_t ret;
     85              uint8_t i;
     86              uint8_t addr;
     87              uint8_t pin_st_u8;
     88              uint8_t gpio_pin_num_u8;
     89              const App_Cfg_GpioPin_st * gpio_pin_cpst;
     90              
     91              const App_Cfg_Gpio_st * gpio_cfg = (void *)0;
     92              
     93              ret = Boot_GetApp_Cfg_Gpio(gpio_cfg);
     94          
     95              if(ret == ERROR)
     96                  return 0;
     97          
     98              gpio_pin_num_u8 = gpio_cfg->app_cfg_gpio_num;
     99              gpio_pin_cpst = gpio_cfg->app_cfg_gpio_init_past;
    100          
    101              if( (gpio_pin_num_u8 == 0) || (gpio_pin_cpst == (void *)0) )
    102                  return 0;
    103          
    104              for(i=0; i<gpio_pin_num_u8; i++)
    105              {
    106                  if((gpio_pin_cpst + i)->app_cfg_gpio_func == GPIO_BOARD_ADDR)
    107                  {
    108                      pin_st_u8 = GPIO_ReadInputDataBit((gpio_pin_cpst + i)->app_cfg_gpio, (gpio_pin_cpst + i)->app_cfg_gpio_pin_st.GPIO_Pin);
    109                      addr |= (pin_st_u8<<i);
    110                  }
    111                  else
    112                  {
    113          
    114                  }
    115                  
    116              }
    117              return addr;
    118          }
    119          
    120          
    121          /*run led control*/
    122          inline void Disable_run_led(void)
    123          {
    124             GPIOC->BSRR |= GPIO_Pin_4;
    125          }
    126          
    127          inline void Enable_run_led(void)
    128          {
    129             GPIOC->BRR |= GPIO_Pin_4;
    130          }
    131          
    132          /*error led control*/
    133          inline void Disable_err_led(void)
    134          {
    135             GPIOC->BSRR |= GPIO_Pin_5;
    136          }
    137          
    138          inline void Enable_err_led(void)
    139          {
    140             GPIOC->BRR |= GPIO_Pin_5;
    141          }
    142          
    143          
    144          
    145          /******************* (C) COPYRIGHT 2018 *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   Disable_usart_rx
         8   -> Io_functions
       8   Disable_usart_tx
         8   -> Io_functions
       8   Enable_usart_rx
         8   -> Io_functions
       8   Enable_usart_tx
         8   -> Io_functions
      32   Get_board_address
        32   -> Boot_GetApp_Cfg_Gpio
        32   -> GPIO_ReadInputDataBit
      40   Io_functions
        40   -> Boot_GetApp_Cfg_Gpio
        40   -> GPIO_ReadInputDataBit
        40   -> GPIO_WriteBit


   Section sizes:

   Bytes  Function/Label
   -----  --------------
      14  Disable_usart_rx
      14  Disable_usart_tx
      14  Enable_usart_rx
      14  Enable_usart_tx
     132  Get_board_address
     182  Io_functions

 
 370 bytes in section .text
 
 370 bytes of CODE memory

Errors: none
Warnings: 1
