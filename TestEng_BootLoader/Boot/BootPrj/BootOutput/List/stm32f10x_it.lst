###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        09/Jun/2019  21:27:06
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Libraries\CMSIS\stm32f10x_it.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Libraries\CMSIS\stm32f10x_it.c
#        -lcN
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -lb
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -o
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootApp\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootDrv\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootOth\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\stm32f10x_it.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\stm32f10x_it.o
#
###############################################################################

F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Libraries\CMSIS\stm32f10x_it.c
      1          /**
      2            ******************************************************************************
      3            * @file    irq.c  burn in system
      4            * @author  h&h
      5            * @version 
      6            * @date    
      7            * @brief
      8          
      9            ******************************************************************************
     10          **/ 
     11          
     12          #include "include.h"
     13          
     14          /*******************************************************************************
     15          * Function Name  : USART2_IRQHandler
     16          * Description    : 
     17          * Input          : None
     18          * Output         : None
     19          * Return         : None
     20          *******************************************************************************/
     21          
     22          void USART2_IRQHandler(void)
     23          {
     24          
     25          }
     26          
     27          
     28          /*******************************************************************************
     29          * Function Name  : EXTI9_5_IRQHandler
     30          * Description    : 
     31          * Input          : None
     32          * Output         : None
     33          * Return         : None
     34          *******************************************************************************/
     35          void EXTI9_5_IRQHandler(void)
     36          {
     37          
     38          }
     39          
     40          
     41          /*******************************************************************************
     42          * Function Name  : TIM2_IRQHandler
     43          * Description    : 
     44          * Input          : None
     45          * Output         : None
     46          * Return         : None
     47          *******************************************************************************/
     48          void TIM2_IRQHandler(void)
     49          {
     50               
     51               TIM_ClearFlag(TIM2, TIM_FLAG_Update);
     52          }
     53          /*******************************************************************************
     54          * Function Name  : NMI_Handler
     55          * Description    : This function handles NMI exception.
     56          * Input          : None
     57          * Output         : None
     58          * Return         : None
     59          *******************************************************************************/
     60          void NMI_Handler(void)
     61          {
     62          }
     63          
     64          /*******************************************************************************
     65          * Function Name  : HardFault_Handler
     66          * Description    : This function handles Hard Fault exception.
     67          * Input          : None
     68          * Output         : None
     69          * Return         : None
     70          *******************************************************************************/
     71          void HardFault_Handler(void)
     72          {
     73            /* Go to infinite loop when Hard Fault exception occurs */
     74            while (1)
     75            {
     76            }
     77          }
     78          
     79          /*******************************************************************************
     80          * Function Name  : MemManage_Handler
     81          * Description    : This function handles Memory Manage exception.
     82          * Input          : None
     83          * Output         : None
     84          * Return         : None
     85          *******************************************************************************/
     86          void MemManage_Handler(void)
     87          {
     88            /* Go to infinite loop when Memory Manage exception occurs */
     89            while (1)
     90            {
     91            }
     92          }
     93          
     94          /*******************************************************************************
     95          * Function Name  : BusFault_Handler
     96          * Description    : This function handles Bus Fault exception.
     97          * Input          : None
     98          * Output         : None
     99          * Return         : None
    100          *******************************************************************************/
    101          void BusFault_Handler(void)
    102          {
    103            /* Go to infinite loop when Bus Fault exception occurs */
    104            while (1)
    105            {
    106            }
    107          }
    108          
    109          /*******************************************************************************
    110          * Function Name  : UsageFault_Handler
    111          * Description    : This function handles Usage Fault exception.
    112          * Input          : None
    113          * Output         : None
    114          * Return         : None
    115          *******************************************************************************/
    116          void UsageFault_Handler(void)
    117          {
    118            /* Go to infinite loop when Usage Fault exception occurs */
    119            while (1)
    120            {
    121            }
    122          }
    123          
    124          /*******************************************************************************
    125          * Function Name  : SVC_Handler
    126          * Description    : This function handles SVCall exception.
    127          * Input          : None
    128          * Output         : None
    129          * Return         : None
    130          *******************************************************************************/
    131          void SVC_Handler(void)
    132          {
    133          }
    134          
    135          /*******************************************************************************
    136          * Function Name  : DebugMon_Handler
    137          * Description    : This function handles Debug Monitor exception.
    138          * Input          : None
    139          * Output         : None
    140          * Return         : None
    141          *******************************************************************************/
    142          void DebugMon_Handler(void)
    143          {
    144          }
    145          
    146          /*******************************************************************************
    147          * Function Name  : PendSV_Handler
    148          * Description    : This function handles PendSVC exception.
    149          * Input          : None
    150          * Output         : None
    151          * Return         : None
    152          *******************************************************************************/
    153          void PendSV_Handler(void)
    154          {
    155          }
    156          
    157          /*******************************************************************************
    158          * Function Name  : SysTick_Handler
    159          * Description    : This function handles SysTick Handler.
    160          * Input          : None
    161          * Output         : None
    162          * Return         : None
    163          *******************************************************************************/
    164          #if 0
    165          void SysTick_Handler(void)
    166          {
    167          
    168          }
    169          #endif
    170          /*******************************************************************************
    171          * Function Name  : RTC_IRQHandler
    172          * Description    : This function handles RTC global interrupt request.
    173          * Input          : None
    174          * Output         : None
    175          * Return         : None
    176          *******************************************************************************/
    177          void RTC_IRQHandler(void)
    178          {
    179           
    180          }
    181          
    182          
    183          /*******************************************************************************
    184          * Function Name  : SPI2_IRQHandler
    185          * Description    : This function handles SPI2 global interrupt request.
    186          * Input          : None
    187          * Output         : None
    188          * Return         : None
    189          *******************************************************************************/
    190          void SPI2_IRQHandler(void)
    191          {
    192          
    193          }
    194          
    195          /*******************************************************************************
    196          * Function Name  : SPI2_IRQHandler
    197          * Description    : This function handles SPI2 global interrupt request.
    198          * Input          : None
    199          * Output         : None
    200          * Return         : None
    201          *******************************************************************************/
    202          void I2C1_ER_IRQHandler(void)
    203          {
    204            
    205          }
    206          
    207          
    208          
    209          
    210          /*******************************************************************************
    211          * Function Name  : RTCAlarm_IRQHandler
    212          * Description    : This function handles RTC Alarm interrupt request.
    213          * Input          : None
    214          * Output         : None
    215          * Return         : None
    216          *******************************************************************************/
    217          void RTCAlarm_IRQHandler(void)
    218          {
    219            
    220          }
    221          
    222          
    223          
    224          
    225          /******************* (C) COPYRIGHT 2018 *****END OF FILE****/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BusFault_Handler
       0   DebugMon_Handler
       0   EXTI9_5_IRQHandler
       0   HardFault_Handler
       0   I2C1_ER_IRQHandler
       0   MemManage_Handler
       0   NMI_Handler
       0   PendSV_Handler
       0   RTCAlarm_IRQHandler
       0   RTC_IRQHandler
       0   SPI2_IRQHandler
       0   SVC_Handler
       8   TIM2_IRQHandler
         8   -> TIM_ClearFlag
       0   USART2_IRQHandler
       0   UsageFault_Handler


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       2  BusFault_Handler
       2  DebugMon_Handler
       2  EXTI9_5_IRQHandler
       2  HardFault_Handler
       2  I2C1_ER_IRQHandler
       2  MemManage_Handler
       2  NMI_Handler
       2  PendSV_Handler
       2  RTCAlarm_IRQHandler
       2  RTC_IRQHandler
       2  SPI2_IRQHandler
       2  SVC_Handler
      14  TIM2_IRQHandler
       2  USART2_IRQHandler
       2  UsageFault_Handler

 
 42 bytes in section .text
 
 42 bytes of CODE memory

Errors: none
Warnings: none
