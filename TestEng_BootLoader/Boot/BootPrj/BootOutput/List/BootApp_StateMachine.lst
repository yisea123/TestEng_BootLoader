###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        30/Jun/2019  12:01:39
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootApp_StateMachine.c
#    Command line =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootApp_StateMachine.c
#        -lcN
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -lb
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -o
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootApp\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootDrv\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootOth\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\CMSIS\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\ascii\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\include\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\modbus_port\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\rtu\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\tcp\
#        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\BootApp_StateMachine.lst
#    Object file  =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\BootApp_StateMachine.o
#
###############################################################################

D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootApp_StateMachine.c
      1          /*<BASDKey>
      2           **********************************************************************************************************************
      3           *
      4           * COPYRIGHT RESERVED, FeedLiTech, 2019. All rights reserved.
      5           * The reproduction, distribution and utilization of this document as well as the communication of its contents to
      6           * others without explicit authorization is prohibited. Offenders will be held liable for the payment of damages.
      7           * All rights reserved in the event of the grant of a patent, utility model or design.
      8           *
      9           **********************************************************************************************************************
     10          </BASDKey>*/
     11          
     12          #include "BootApp_Cfg.h"
     13          #include "BootApp_Cfg_Board.h"
     14          #include "BootApp_Type.h"
     15          #include "BootApp_Priv.h"
     16          
     17          BootApp_State_ten BootApp_State_en = BOOTAPP_STATE_INIT;
     18          
     19          
     20          void BootApp_Set_State(BootApp_State_ten state_en)
     21          {
     22              BootApp_State_en = state_en;
     23          }
     24          
     25          BootApp_State_ten BootApp_Get_State(void)
     26          {
     27              return BootApp_State_en;
     28          }
     29          
     30          void BootApp_StateMachine(void)
     31          {
     32              uint8_t newcmd;
     33              BootApp_State_ten state_en;
     34              BootApp_State_ten new_state_en;
     35          
     36              state_en = BootApp_Get_State();
     37              BootApp_Status_ten status_en = BOOTAPP_STATUS_INI;
     38          
     39              BootApp_CommunicationBuffer_tst * ComBuffer_pst = (void *)0;
     40              BootApp_Get_CommunicationBuf(&ComBuffer_pst);
     41          
     42              BootApp_CmdBuffer_tst * CmdBuffer_pst = &(ComBuffer_pst->cmdbuffer_st);
     43              BootApp_PageBuffer_ten * PageBuffer_pen = &(ComBuffer_pst->pagebuffer_en);
     44              PageBuffer_pen = PageBuffer_pen;
     45          
     46              BootApp_HandleCmd_Receive();
     47          
     48              switch(state_en)
     49              {
     50              case BOOTAPP_STATE_INIT:
     51              {
     52                  BootApp_State_Init_Act();
     53                  BootApp_Set_State(BOOTAPP_STATE_RCMD);
     54                  break;
     55              }
     56              case BOOTAPP_STATE_RCMD:
     57              {
     58                  newcmd = BootApp_NewCmd_Received(CmdBuffer_pst);
     59                  if(newcmd)
     60                  {
     61                      new_state_en = BootApp_Get_Command(CmdBuffer_pst);
     62                      BootApp_Set_State(new_state_en);
     63                  }
     64                  else
     65                  {
     66          
     67                  }
     68                  break;
     69              }
     70              case BOOTAPP_STATE_STRP:
     71              {
     72                  BootApp_Log_Exe_Status(BOOTAPP_STATE_STRP, BOOTAPP_EREASE_ONGOING);
     73                  status_en = BootApp_Erease_App();
     74                  BootApp_Log_Exe_Status(BOOTAPP_STATE_STRP, status_en);
     75                  if(status_en != BOOTAPP_EREASE_OK)
     76                  {
     77                      BootApp_Reset_Sys();
     78                  }
     79                  else
     80                  {
     81                      BootApp_Set_State(BOOTAPP_STATE_RCMD);
     82                  }
     83                  break;
     84              }
     85              case BOOTAPP_STATE_RDAT:
     86              {
     87                  newcmd = BootApp_NewCmd_Received(CmdBuffer_pst);
     88                  if(newcmd)
     89                  {
     90                      BootApp_Log_Exe_Status(BOOTAPP_STATE_RDAT, BOOTAPP_RDATA_ONGOING);
     91                      status_en = BootApp_Receive_Data(ComBuffer_pst);
     92                      BootApp_Log_Exe_Status(BOOTAPP_STATE_RDAT, status_en);
     93                      if(BootApp_Receive_Data_Finish())
     94                      {
     95                          BootApp_Set_State(BOOTAPP_STATE_RCMD);
     96                      }
     97                      else
     98                      {
     99          
    100                      }
    101                  }
    102                  else
    103                  {
    104          
    105                  }
    106                  break;
    107              }
    108              case BOOTAPP_STATE_WDAT:
    109              {
    110                  BootApp_Log_Exe_Status(BOOTAPP_STATE_WDAT, BOOTAPP_WDAT_ONGOING);
    111                  status_en = BootApp_Program_Flash(ComBuffer_pst);
    112                  BootApp_Log_Exe_Status(BOOTAPP_STATE_WDAT, status_en);
    113                  if(BOOTAPP_WDAT_SEC_FINISH == status_en)
    114                  {
    115                      BootApp_Enable_ReceiveData();
    116                      BootApp_Set_State(BOOTAPP_STATE_RCMD);
    117                  }
    118                  else if(BOOTAPP_WDAT_FINISH == status_en)
    119                  {
    120                      BootApp_Set_State(BOOTAPP_STATE_VALI);
    121                  }
    122                  else if(BOOTAPP_WDAT_PROG_FLASH_ERR == status_en)
    123                  {
    124                      BootApp_Reset_Sys();
    125                  }
    126                  else
    127                  {
    128                      BootApp_Set_State(BOOTAPP_STATE_RCMD);
    129                  }
    130                  break;
    131              }
    132              case BOOTAPP_STATE_VALI:
    133              {
    134                  BootApp_Log_Exe_Status(BOOTAPP_STATE_VALI, BOOTAAPP_VALI_ONGOING);
    135                  status_en = BootApp_Validate_App();
    136                  BootApp_Log_Exe_Status(BOOTAPP_STATE_VALI, status_en);
    137                  if(BOOTAAPP_VALI_COMPLETE == status_en)
    138                  {
    139                      BootApp_Set_State(BOOTAPP_STATE_JUMP);
    140                  }
    141                  else if(BOOTAAPP_VALI_NOT_COMPLETE == status_en)
    142                  {
    143                      BootApp_Reset_Sys();
    144                  }
    145                  break;
    146              }
    147              case BOOTAPP_STATE_JUMP:
    148              {
    149                  BootApp_Log_Exe_Status(BOOTAPP_STATE_JUMP, BOOTAPP_JUMP_TO_APP);
    150                  BootApp_Run_App();
    151                  break;
    152              }
    153              default :
    154                  break;
    155              }
    156          
    157              BootApp_HandleCmd_Send();
    158          }
    159          
    160          void BootApp_State_Init_Act(void)
    161          {
    162              /*callout for state machine*/
    163              BootApp_Reset_ten reset_en;
    164              BootApp_Status_ten  status_en;
    165          
    166              #if 1
    167              reset_en = BootApp_GetReset_Reason();
    168          
    169              if(BOOTAPP_RESET_POWERON == reset_en)
    170              {
    171                  status_en = BootApp_Validate_App();
    172                  if(BOOTAAPP_VALI_COMPLETE == status_en)
    173                  {
    174                      BootApp_Run_App();
    175                  }
    176                  else
    177                  {
    178                      BootApp_Prog_init();
    179                  }
    180              }
    181              else if(BOOTAPP_RESET_PROG == reset_en)
    182              {
    183                  BootApp_Prog_init();
    184              }
    185              else
    186              {
    187                  BootApp_Reset_Sys();
    188              }
    189              #endif
    190          }
    191          
    192          /*<BASDKey>
    193           ***********************************************************************************************************************
    194           * $History___:
    195           *
    196           * U1.0.0;      20.05.2019 new created for BootLoader he.huang@feedlitech.com
    197           *
    198           * $
    199           ***********************************************************************************************************************
    200          </BASDKey>*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BootApp_Get_State
       0   BootApp_Set_State
      32   BootApp_StateMachine
        32   -> BootApp_Enable_ReceiveData
        32   -> BootApp_Erease_App
        32   -> BootApp_Get_Command
        32   -> BootApp_Get_CommunicationBuf
        32   -> BootApp_Get_State
        32   -> BootApp_HandleCmd_Receive
        32   -> BootApp_HandleCmd_Send
        32   -> BootApp_Log_Exe_Status
        32   -> BootApp_NewCmd_Received
        32   -> BootApp_Program_Flash
        32   -> BootApp_Receive_Data
        32   -> BootApp_Receive_Data_Finish
        32   -> BootApp_Reset_Sys
        32   -> BootApp_Run_App
        32   -> BootApp_Set_State
        32   -> BootApp_State_Init_Act
        32   -> BootApp_Validate_App
      16   BootApp_State_Init_Act
        16   -> BootApp_GetReset_Reason
        16   -> BootApp_Prog_init
        16   -> BootApp_Reset_Sys
        16   -> BootApp_Run_App
        16   -> BootApp_Validate_App


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       6  BootApp_Get_State
       6  BootApp_Set_State
     392  BootApp_StateMachine
      60  BootApp_State_Init_Act
       1  BootApp_State_en

 
   1 byte  in section .bss
 468 bytes in section .text
 
 468 bytes of CODE memory
   1 byte  of DATA memory

Errors: none
Warnings: none
