###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        30/Jun/2019  12:01:43
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\modbus\modbus_port\portserial.c
#    Command line =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\modbus\modbus_port\portserial.c
#        -lcN
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -lb
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -o
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootApp\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootDrv\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootOth\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\CMSIS\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\ascii\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\include\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\modbus_port\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\rtu\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\tcp\
#        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\portserial.lst
#    Object file  =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\portserial.o
#
###############################################################################

D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\modbus\modbus_port\portserial.c
      1          /*
      2           * FreeModbus Libary: ATMega168 Port
      3           * Copyright (C) 2006 Christian Walter <wolti@sil.at>
      4           *   - Initial version and ATmega168 support
      5           * Modfications Copyright (C) 2006 Tran Minh Hoang:
      6           *   - ATmega8, ATmega16, ATmega32 support
      7           *   - RS485 support for DS75176
      8           *
      9           * This library is free software; you can redistribute it and/or
     10           * modify it under the terms of the GNU Lesser General Public
     11           * License as published by the Free Software Foundation; either
     12           * version 2.1 of the License, or (at your option) any later version.
     13           *
     14           * This library is distributed in the hope that it will be useful,
     15           * but WITHOUT ANY WARRANTY; without even the implied warranty of
     16           * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
     17           * Lesser General Public License for more details.
     18           *
     19           * You should have received a copy of the GNU Lesser General Public
     20           * License along with this library; if not, write to the Free Software
     21           * Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
     22           *
     23           * File: $Id: portserial.c,v 1.6 2006/09/17 16:45:53 wolti Exp $
     24           */
     25          
     26          #include "include.h"
     27          #include "BootApp.h"
     28          #include "Delay.h"
     29          #include "port.h"
     30          
     31          /* ----------------------- Modbus includes ----------------------------------*/
     32          #include "mb.h"
     33          #include "mbport.h"
     34          
     35          USART_TypeDef* MB_USART_PORT[1];
     36          
     37          BOOL xMBPortSerialInit( UCHAR ucPORT, ULONG ulBaudRate, UCHAR ucDataBits, eMBParity eParity )
     38          {
     39              BootApp_Get_Uart(&MB_USART_PORT[0]);
     40              return TRUE;
     41          
     42          }
     43          void vMBPortClose( void )
     44          {
     45              vMBPortSerialEnable(0,0);
     46          }
     47          
     48          
     49          void vMBPortSerialEnable( BOOL xRxEnable, BOOL xTxEnable )
     50          {
     51              if(xRxEnable)
     52              {
     53                  BootApp_Enable_usart_rx();
     54                  USART_ITConfig(MB_USART_PORT[0], USART_IT_RXNE, ENABLE);
     55                  
     56              }
     57              else
     58              {
     59                  BootApp_Disable_usart_rx();
     60                  USART_ITConfig(MB_USART_PORT[0], USART_IT_RXNE, DISABLE); 
     61                  
     62              }
     63          
     64              if(xTxEnable)
     65              {
     66                  BootApp_Enable_usart_tx();
     67                  USART_ITConfig(MB_USART_PORT[0], USART_IT_TXE, ENABLE);
     68                  
     69              }
     70              else
     71              {
     72                  Delay_ms(5);
     73                  BootApp_Disable_usart_tx();
     74                  USART_ITConfig(MB_USART_PORT[0], USART_IT_TXE, DISABLE);
     75              }
     76          
     77          }
     78          
     79          
     80          BOOL xMBPortSerialPutByte( CHAR ucByte )
     81          {
     82              USART_SendData(MB_USART_PORT[0], ucByte);
     83              return TRUE;
     84          }
     85          BOOL xMBPortSerialGetByte( CHAR * pucByte )
     86          {
     87              *pucByte = USART_ReceiveData(MB_USART_PORT[0]);
     88              return TRUE;
     89          }
     90          
     91          
     92          static void prvvUARTTxReadyISR( void )
     93          {
     94              pxMBFrameCBTransmitterEmpty();
     95          }
     96          
     97          static void prvvUARTRxISR( void )
     98          {
     99              pxMBFrameCBByteReceived();
    100          }
    101          
    102          void USART1_IRQHandler(void)
    103          {
    104          
    105              if(USART_GetITStatus(MB_USART_PORT[0], USART_IT_RXNE) == SET)
    106              {
    107                  prvvUARTRxISR(); 
    108                  USART_ClearITPendingBit(MB_USART_PORT[0], USART_IT_RXNE); 
    109              }
    110          
    111              if(USART_GetITStatus(MB_USART_PORT[0], USART_IT_TXE) == SET)
    112              {
    113                  prvvUARTTxReadyISR();
    114                  USART_ClearITPendingBit(MB_USART_PORT[0], USART_IT_TXE);
    115              }
    116          }
    117          
    118          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       8   USART1_IRQHandler
         8   -> USART_ClearITPendingBit
         8   -> USART_GetITStatus
         8   -> prvvUARTRxISR
         8   -> prvvUARTTxReadyISR
       8   prvvUARTRxISR
         8   -- Indirect call
       8   prvvUARTTxReadyISR
         8   -- Indirect call
       8   vMBPortClose
         8   -> vMBPortSerialEnable
      16   vMBPortSerialEnable
        16   -> BootApp_Disable_usart_rx
        16   -> BootApp_Disable_usart_tx
        16   -> BootApp_Enable_usart_rx
        16   -> BootApp_Enable_usart_tx
        16   -> Delay_ms
        16   -> USART_ITConfig
       8   xMBPortSerialGetByte
         8   -> USART_ReceiveData
      24   xMBPortSerialInit
        24   -> BootApp_Get_Uart
       8   xMBPortSerialPutByte
         8   -> USART_SendData


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  MB_USART_PORT
      68  USART1_IRQHandler
      10  prvvUARTRxISR
      10  prvvUARTTxReadyISR
      12  vMBPortClose
     102  vMBPortSerialEnable
      18  xMBPortSerialGetByte
      20  xMBPortSerialInit
      22  xMBPortSerialPutByte

 
   4 bytes in section .bss
 274 bytes in section .text
 
 274 bytes of CODE memory
   4 bytes of DATA memory

Errors: none
Warnings: none
