###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        01/Sep/2019  15:31:06
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootApp_ReceiveData.c
#    Command line =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootApp_ReceiveData.c
#        -lcN
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -lb
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -o
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "D:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootApp\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootDrv\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootOth\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\CMSIS\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\ascii\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\include\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\modbus_port\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\rtu\
#        -I
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\tcp\
#        -On -I "D:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\BootApp_ReceiveData.lst
#    Object file  =  
#        D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\BootApp_ReceiveData.o
#
###############################################################################

D:\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootApp_ReceiveData.c
      1          /*<BASDKey>
      2           **********************************************************************************************************************
      3           *
      4           * COPYRIGHT RESERVED, FeedLiTech, 2019. All rights reserved.
      5           * The reproduction, distribution and utilization of this document as well as the communication of its contents to
      6           * others without explicit authorization is prohibited. Offenders will be held liable for the payment of damages.
      7           * All rights reserved in the event of the grant of a patent, utility model or design.
      8           *
      9           **********************************************************************************************************************
     10          </BASDKey>*/
     11          
     12          #include "BootApp_Cfg.h"
     13          #include "BootApp_Cfg_Board.h"
     14          #include "BootApp_Type.h"
     15          #include "BootApp_Priv.h"
     16          
     17          BootApp_SectBuffer_ten BootApp_SectBuffer_en = {{0},};
     18          BootApp_ReceiveData_tst BootApp_ReceiveData_st = {0};
     19          
     20          const uint16_t BootApp_Sect_Dirty_Msk_au16[16 + 1] =
     21          {
     22              0x0000,
     23              0x0001, 0x0003, 0x0007, 0x000F, 0x001F, 0x003F, 0x007F, 0x00FF,
     24              0x01FF, 0x03FF, 0x07FF, 0x0FFF, 0x1FFF, 0x3FFF, 0x7FFF, 0xFFFF,
     25          };
     26          
     27          
     28          uint8_t BootApp_NewCmd_Received(const BootApp_CmdBuffer_tst *CmdBuffer_pst)
     29          {
     30              uint8_t ret;
     31              static uint32_t magic_num = 0;
     32              if(CmdBuffer_pst->cmd32_07 != magic_num)
     33              {
     34                  ret = 1;
     35              }
     36              else
     37              {
     38                  ret = 0;
     39              }
     40              magic_num = CmdBuffer_pst->cmd32_07;
     41          
     42              return ret;
     43          }
     44          
     45          
     46          
     47          BootApp_State_ten BootApp_Get_Command(const BootApp_CmdBuffer_tst * CmdBuffer_pst)
     48          {
     49              BootApp_State_ten state_en;
     50              state_en = (BootApp_State_ten)CmdBuffer_pst->cmd16_00;
     51              if(state_en < BOOTAPP_STATE_NUMB)
     52              {
     53          
     54              }
     55              else
     56              {
     57                  state_en = BOOTAPP_STATE_RCMD;
     58              }
     59              return state_en;
     60          }
     61          
     62          uint8_t BootApp_SectBuffer_Write(uint16_t start_addr, uint16_t length, const uint32_t *src)
     63          {
     64              uint8_t ret;
     65              uint32_t * des;
     66          
     67              if( (start_addr > BOOTAPP_APP_SECTOR_SIZE>>2 ) ||
     68                  (start_addr + length > BOOTAPP_APP_SECTOR_SIZE>>2) ||
     69                  (0 == length) ||
     70                  ((void*)0 == src) )
     71              {
     72                  ret = 0;
     73              }
     74              else
     75              {
     76                  des = &BootApp_SectBuffer_en.buf_au32[start_addr];
     77                  while(length--)
     78                  {
     79                      *des++ = *src++;
     80                  }
     81                  ret = 1;
     82              }
     83              return ret;
     84          }
     85          
     86          uint8_t BootApp_SectBuffer_Read(uint16_t start_addr, uint16_t length, uint32_t *des)
     87          {
     88              uint8_t ret;
     89              uint32_t * src;
     90          
     91              if( (start_addr > BOOTAPP_APP_SECTOR_SIZE/2 - 1) ||
     92                  (start_addr + length > BOOTAPP_APP_SECTOR_SIZE/2 -1) ||
     93                  (0 == length) ||
     94                  ((void*)0 == des) )
     95              {
     96                  ret = 0;
     97              }
     98              else
     99              {
    100                  src = &BootApp_SectBuffer_en.buf_au32[start_addr];
    101                  while(length--)
    102                  {
    103                      *des++ = *src++;
    104                  }
    105                  ret = 1;
    106              }
    107              return ret;
    108          }
    109          
    110          
    111          uint8_t BootApp_PageBuffer_Read(BootApp_PageBuffer_ten * page_buffer,
    112                                          uint16_t start_addr, uint16_t length, uint32_t *des)
    113          {
    114              uint8_t ret;
    115              uint32_t * src;
    116          
    117              if( (start_addr > BOOTAPP_APP_PAGE_SIZE/2) ||
    118                  (start_addr + length > BOOTAPP_APP_PAGE_SIZE/2) ||
    119                  (0 == length) ||
    120                  ((void*)0 == des) )
    121              {
    122                  ret = 0;
    123              }
    124              else
    125              {
    126                  src = &page_buffer->buf_au32[start_addr];
    127                  while(length--)
    128                  {
    129                      *des++ = *src++;
    130                  }
    131                  ret = 1;
    132              }
    133              return ret;
    134          }
    135          
    136          BootApp_Status_ten BootApp_Receive_Data(const BootApp_CommunicationBuffer_tst *ComBuffer_pst)
    137          {
    138              uint8_t validate_res = 0;
    139              uint8_t w_buffer_st = 0;
    140          
    141              BootApp_Status_ten status_en = BOOTAPP_RDATA_ONGOING;
    142              BootApp_ReceiveData_tst receivedata_st = {0};
    143              BootApp_ReceiveData_tst *receivedata_pst = &BootApp_ReceiveData_st;
    144          
    145              const BootApp_CmdBuffer_tst * CmdBuffer_pst = &(ComBuffer_pst->cmdbuffer_st);
    146              const BootApp_PageBuffer_ten * PageBuffer_pen = &(ComBuffer_pst->pagebuffer_en);
    147          
    148              BootApp_Enter_Schm();
    149              receivedata_st.sect_num_u16 = CmdBuffer_pst->cmd16_01;
    150              receivedata_st.page_num_u16 = CmdBuffer_pst->cmd16_02;
    151              receivedata_st.page_len_u16 = CmdBuffer_pst->cmd16_03;
    152              receivedata_st.page_str_addr_u16 = CmdBuffer_pst->cmd16_04;
    153              receivedata_st.page_end_addr_u16 = CmdBuffer_pst->cmd16_05;
    154              receivedata_st.start_addr_u32 = CmdBuffer_pst->cmd32_00;
    155              receivedata_st.end_addr_u32 = CmdBuffer_pst->cmd32_01;
    156              BootApp_Exit_Schm();
    157          
    158              receivedata_st.sect_dirty_u16 = receivedata_pst->sect_dirty_u16;
    159              receivedata_st.sect_ready_u16 = receivedata_pst->sect_ready_u16;
    160              /*sector buffer not empty*/
    161              if(receivedata_st.sect_ready_u16)
    162              {
    163                  status_en = BOOTAPP_RDATA_BUF_FUL_ERR;
    164                  return status_en;
    165              }
    166              /*validate sector number sector number starts from 1 to N, N...4*/
    167              if( (receivedata_st.sect_num_u16 <= BOOTAPP_APP_SECTOR_NUM) &&
    168                  (receivedata_st.sect_num_u16 >= 1) )
    169              {
    170                  /*sector not finished*/
    171                  if(receivedata_st.sect_dirty_u16 != 0)
    172                  {
    173                      /*continue write current sector*/
    174                      if(receivedata_pst->sect_num_u16 == receivedata_st.sect_num_u16)
    175                      {
    176                          validate_res = 1;
    177                      }
    178                      else
    179                      {
    180                          status_en = BOOTAPP_RDATA_SEC_N_COMPLETE_ERR;
    181                          validate_res = 0;
    182                      }
    183                  }
    184                  else
    185                  {
    186                      /*previous sector write finished, latest sector shall be the next one*/
    187                      if(receivedata_st.sect_num_u16 == receivedata_pst->sect_num_u16 + 1)
    188                      {
    189                          validate_res = 1;
    190                      }
    191                      else
    192                      {
    193                          status_en = BOOTAPP_RDATA_SEC_N_CONTIOUS_ERR;
    194                          validate_res = 0;
    195                      }
    196                  }
    197              }
    198              else
    199              {
    200                  status_en = BOOTAPP_RDATA_INVALID_SEC_ERR;
    201                  validate_res = 0;
    202              }
    203          
    204              /*validate page info*/
    205              if(validate_res)
    206              {
    207                  if( (receivedata_st.page_num_u16 <= BOOTAPP_APP_PAGE_NUM) &&
    208                      (receivedata_st.page_num_u16 >= 1) )
    209                  {
    210                      validate_res = 1;
    211                  }
    212                  else
    213                  {
    214                      status_en = BOOTAPP_RDATA_INVALID_PAGE_ERR;
    215                      validate_res = 0;
    216                  }
    217              }
    218              else
    219              {
    220          
    221              }
    222          
    223              if(validate_res)
    224              {
    225                  if( (receivedata_st.page_len_u16 == BOOTAPP_APP_PAGE_SIZE) &&
    226                      (receivedata_st.page_len_u16 == receivedata_st.page_end_addr_u16 - receivedata_st.page_str_addr_u16 + 1) )
    227                  {
    228                      validate_res = 1;
    229                  }
    230                  else
    231                  {
    232                      status_en = BOOTAPP_RDATA_INVALID_PAGE_LEN_ERR;
    233                      validate_res = 0;
    234                  }
    235              }
    236          
    237              if(validate_res)
    238              {
    239                  if( ((receivedata_st.page_str_addr_u16 & (BOOTAPP_APP_PAGE_SIZE - 1) ) == 0) &&
    240                      (receivedata_st.page_str_addr_u16 == BOOTAPP_APP_PAGE_SIZE * (receivedata_st.page_num_u16 - 1)) )
    241                  {
    242                      validate_res = 1;
    243                  }
    244                  else
    245                  {
    246                      status_en = BOOTAPP_RDATA_INVALID_STR_ADDR_ERR;
    247                      validate_res = 0;
    248                  }
    249              }
    250              if(validate_res)
    251              {
    252                  if(receivedata_st.sect_dirty_u16 == BootApp_Sect_Dirty_Msk_au16[receivedata_st.page_num_u16 -1])
    253                  {
    254                      validate_res = 1;
    255                  }
    256                  else
    257                  {
    258                      status_en = BOOTAPP_RDATA_PAGE_N_CONTIOUS_ERR;
    259                      validate_res = 0;
    260                  }
    261              }
    262          
    263              /*validate hex addr info*/
    264              if(validate_res)
    265              {
    266                  if(BOOTAPP_APP_SECTOR_SIZE == receivedata_st.end_addr_u32 - receivedata_st.start_addr_u32 + 1)
    267                  {
    268                      validate_res = 1;
    269                  }
    270                  else
    271                  {
    272                      status_en = BOOTAPP_RDATA_INVALID_SEC_BOUND_ERR;
    273                      validate_res = 0;
    274                  }
    275              }
    276              if(validate_res)
    277              {
    278                  if( (receivedata_st.start_addr_u32 >= BOOTAPP_APP_START_ADDR) &&
    279                      (receivedata_st.end_addr_u32 <= BOOTAPP_APP_END_ADDR) )
    280                  {
    281                      validate_res = 1;
    282                  }
    283                  else
    284                  {
    285                      status_en = BOOTAPP_RDATA_HEX_ADDR_ERR;
    286                      validate_res = 0;
    287                  }
    288              }
    289              if(validate_res)
    290              {
    291                  if(receivedata_pst->sect_num_u16 == 0)
    292                  {
    293                      if(receivedata_st.start_addr_u32 == BOOTAPP_APP_START_ADDR)
    294                      {
    295                          validate_res = 1;
    296                      }
    297                      else
    298                      {
    299                          status_en = BOOTAPP_RDATA_SEC0_ADDR_ALIGN_ERR;
    300                          validate_res = 0;
    301                      }
    302                  }
    303                  else
    304                  {
    305                      if(receivedata_st.start_addr_u32 == BOOTAPP_APP_START_ADDR +  BOOTAPP_APP_SECTOR_SIZE * \
    306                          (receivedata_st.sect_num_u16 - 1) )
    307                      {
    308                          validate_res = 1;
    309                      }
    310                      else
    311                      {
    312                          status_en = BOOTAPP_RDATA_SECN_ADDR_ALIGN_ERR;
    313                          validate_res = 0;
    314                      }
    315                  }
    316          
    317              }
    318              /*validate buf crc*/
    319              /*to be done*/
    320          
    321              /*page data ok, write to sector buffer*/
    322              if(validate_res)
    323              {
    324                  w_buffer_st = BootApp_SectBuffer_Write(receivedata_st.page_str_addr_u16>>2,
    325                                                      receivedata_st.page_len_u16>>2,
    326                                                      &PageBuffer_pen->buf_au32[0]);
    327                  if(w_buffer_st)
    328                  {
    329                      receivedata_pst->page_num_u16 = receivedata_st.page_num_u16;
    330                      receivedata_pst->page_len_u16 = receivedata_st.page_len_u16;
    331                      receivedata_pst->page_str_addr_u16 = receivedata_st.page_str_addr_u16;
    332                      receivedata_pst->page_end_addr_u16 = receivedata_st.page_end_addr_u16;
    333                      receivedata_pst->sect_num_u16 = receivedata_st.sect_num_u16;
    334                      receivedata_pst->start_addr_u32 = receivedata_st.start_addr_u32;
    335                      receivedata_pst->end_addr_u32 = receivedata_st.end_addr_u32;
    336          
    337                      receivedata_pst->sect_dirty_u16 |= 1 << (receivedata_st.page_num_u16 - 1);
    338          
    339                      if(receivedata_pst->sect_dirty_u16 == BootApp_Sect_Dirty_Msk_au16[BOOTAPP_APP_PAGE_NUM])
    340                      {
    341                          receivedata_pst->sect_ready_u16 = 1;
    342                          receivedata_pst->sect_dirty_u16 = 0;
    343                          receivedata_pst->page_num_u16 = 0;
    344                          receivedata_pst->page_len_u16 = 0;
    345                          receivedata_pst->page_str_addr_u16 = 0;
    346                          receivedata_pst->page_end_addr_u16 = 0;
    347          
    348                          status_en = BOOTAPP_RDATA_FINISH;
    349                      }
    350                      else
    351                      {
    352                          receivedata_pst->sect_ready_u16 = 0;
    353                          status_en = BOOTAPP_RDATA_PAGEOK;
    354                      }
    355                  }
    356                  else
    357                  {
    358                      status_en = BOOTAPP_RDATA_SEC_WBUF_ERR;
    359                      receivedata_pst->sect_ready_u16 = 0;
    360                  }
    361          
    362              }
    363              else
    364              {
    365          
    366              }
    367          
    368              return status_en;
    369          
    370          }
    371          
    372          uint8_t BootApp_Receive_Data_Finish(void)
    373          {
    374              return (uint8_t)BootApp_ReceiveData_st.sect_ready_u16;
    375          }
    376          
    377          void BootApp_Get_ReceiveData_Info(const BootApp_ReceiveData_tst ** receivedata_ppst)
    378          {
    379              *receivedata_ppst = &BootApp_ReceiveData_st;
    380          }
    381          
    382          void BootApp_Enable_ReceiveData(void)
    383          {
    384              BootApp_ReceiveData_st.sect_ready_u16 = 0;
    385          }
    386          
    387          /*<BASDKey>
    388           ***********************************************************************************************************************
    389           * $History___:
    390           *
    391           * U1.0.0;      20.05.2019 new created for BootLoader he.huang@feedlitech.com
    392           *
    393           * $
    394           ***********************************************************************************************************************
    395          </BASDKey>*/

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
       0   BootApp_Enable_ReceiveData
       0   BootApp_Get_Command
       0   BootApp_Get_ReceiveData_Info
       0   BootApp_NewCmd_Received
      12   BootApp_PageBuffer_Read
      56   BootApp_Receive_Data
        56   -> BootApp_SectBuffer_Write
        56   -> __aeabi_memclr4
       0   BootApp_Receive_Data_Finish
       8   BootApp_SectBuffer_Read
       8   BootApp_SectBuffer_Write


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable6
       4  ??DataTable6_1
       4  ??DataTable6_2
       4  ??DataTable6_3
       4  ??DataTable6_4
       4  ??DataTable6_5
       4  ??DataTable6_6
      24  ?_0
       8  BootApp_Enable_ReceiveData
      20  BootApp_Get_Command
       6  BootApp_Get_ReceiveData_Info
      36  BootApp_NewCmd_Received
      74  BootApp_PageBuffer_Read
      24  BootApp_ReceiveData_st
     756  BootApp_Receive_Data
       8  BootApp_Receive_Data_Finish
      82  BootApp_SectBuffer_Read
      82  BootApp_SectBuffer_Write
    1024  BootApp_SectBuffer_en
      36  BootApp_Sect_Dirty_Msk_au16
       4  magic_num

 
 1 052 bytes in section .bss
    60 bytes in section .rodata
 1 100 bytes in section .text
 
 1 100 bytes of CODE  memory
    60 bytes of CONST memory
 1 052 bytes of DATA  memory

Errors: none
Warnings: none
