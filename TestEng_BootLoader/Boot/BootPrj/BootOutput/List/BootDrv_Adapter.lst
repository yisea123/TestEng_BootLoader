###############################################################################
#
# IAR ANSI C/C++ Compiler V7.20.2.7424/W32 for ARM        23/Jun/2019  15:42:49
# Copyright 1999-2014 IAR Systems AB.
#
#    Cpu mode     =  thumb
#    Endian       =  little
#    Source file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootDrv_Adapter.c
#    Command line =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootDrv_Adapter.c
#        -lcN
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -lb
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\
#        -o
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\
#        --no_cse --no_unroll --no_inline --no_code_motion --no_tbaa
#        --no_clustering --no_scheduling --debug --endian=little
#        --cpu=Cortex-M3 -e --fpu=None --dlib_config "E:\Program Files
#        (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\INC\c\DLib_Config_Normal.h" -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootApp\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootDrv\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\BootOth\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\CMSIS\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\..\Libraries\STM32F10x_StdPeriph_Driver\inc\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\ascii\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\include\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\modbus_port\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\rtu\
#        -I
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\..\modbus\tcp\
#        -On -I "E:\Program Files (x86)\IAR Systems\Embedded Workbench
#        7.0\arm\CMSIS\Include\"
#    List file    =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\List\BootDrv_Adapter.lst
#    Object file  =  
#        F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootPrj\BootOutput\Obj\BootDrv_Adapter.o
#
###############################################################################

F:\FLT\GitHub\TestEng_BootLoader\TestEng_BootLoader\Boot\BootApp\src\BootDrv_Adapter.c
      1          /*<BASDKey>
      2           **********************************************************************************************************************
      3           *
      4           * COPYRIGHT RESERVED, FeedLiTech, 2019. All rights reserved.
      5           * The reproduction, distribution and utilization of this document as well as the communication of its contents to
      6           * others without explicit authorization is prohibited. Offenders will be held liable for the payment of damages.
      7           * All rights reserved in the event of the grant of a patent, utility model or design.
      8           *
      9           **********************************************************************************************************************
     10          </BASDKey>*/
     11          
     12          #include "BootApp_Cfg.h"
     13          #include "BootApp_Cfg_Board.h"
     14          #include "BootApp_Type.h"
     15          #include "BootApp_Priv.h"
     16          
     17          #if (BOOTAPP_BOARD_SUPPORT == TestEng_Debug)
     18          void BootDrv_Reset(void)
     19          {
     20          
     21          }
     22          
     23          uint8_t BootDrv_EreaseFlash(uint32_t str_addr_u32, uint32_t sect_siz_u32)
     24          {
     25              return 1;
     26          }
     27          
     28          uint8_t BootDrv_ProgramFlash(uint32_t start_addr_u32, uint32_t end_addr_u32, uint32_t length_u32)
     29          {
     30              return 1;
     31          }
     32          
     33          #else
     34          
     35          void BootDrv_Reset(void)
     36          {
     37          #if 0
     38              __set_FAULTMASK(1);
     39              NVIC_SystemReset();
     40          #endif
     41          }
     42          
     43          uint8_t BootDrv_EreaseFlash(uint32_t str_addr_u32, uint32_t sect_siz_u32)
     44          {
     45              uint8_t ret;
     46          
     47              FLASH_Status sts;
     48              if( (str_addr_u32 >= BOOTAPP_APP_START_ADDR) &&
     49                  (str_addr_u32 < BOOTAPP_APP_END_ADDR) )
     50              {
     51                  BootApp_Enter_Schm();
     52                  FLASH_Unlock();
     53                  str_addr_u32 &= (uint32_t)(~(BOOTAPP_APP_SECTOR_SIZE - 1));
     54                  sts = FLASH_ErasePage(str_addr_u32);
     55                  FLASH_Lock();
     56                  BootApp_Exit_Schm();
     57          
     58                  if(FLASH_COMPLETE == sts)
     59                  {
     60                      ret = 1;
     61                  }
     62                  else
     63                  {
     64                      ret = 0;
     65                  }
     66              }
     67              else
     68              {
     69                  ret = 0;
     70              }
     71              return ret;
     72          
     73          }
     74          
     75          uint8_t BootDrv_ProgramFlash(uint32_t start_addr_u32, uint32_t end_addr_u32, uint32_t length_u32)
     76          {
     77              uint8_t ret;
     78              uint16_t i;
     79              uint32_t data;
     80              FLASH_Status sts = FLASH_BUSY;
     81          
     82              (void)length_u32;
     83              if( (start_addr_u32 >= BOOTAPP_APP_START_ADDR) &&
     84                  (start_addr_u32 < BOOTAPP_APP_END_ADDR) )
     85              {
     86                  BootApp_Enter_Schm();
     87                  FLASH_Unlock();
     88          
     89                  for(i=0; i<BOOTAPP_APP_SECTOR_SIZE/4; i++)
     90                  {
     91                      
     92                      ret = BootApp_SectBuffer_Read(i, 1, &data);
     93                      if(ret)
     94                      {
     95                          sts = FLASH_ProgramWord(start_addr_u32, data);
     96                          start_addr_u32 += 4;
     97                      }
     98                      else
     99                      {
    100                          break;
    101                      }
    102                  }
    103                  FLASH_Lock();
    104                  BootApp_Exit_Schm();
    105          
    106                  if(FLASH_COMPLETE == sts)
    107                  {
    108                      ret = 1;
    109                  }
    110                  else
    111                  {
    112                      ret = 0;
    113                  }
    114              }
    115              else
    116              {
    117                  ret = 0;
    118              }
    119              return ret;
    120          
    121          }
    122          
    123          
    124          #endif
    125          
    126          
    127          /*<BASDKey>
    128           ***********************************************************************************************************************
    129           * $History___:
    130           *
    131           * U1.0.0;      20.05.2019 new created for BootLoader he.huang@feedlitech.com
    132           *
    133           * $
    134           ***********************************************************************************************************************
    135          </BASDKey>*/
    136          

   Maximum stack usage in bytes:

   .cstack Function
   ------- --------
      24   BootDrv_EreaseFlash
        24   -> FLASH_ErasePage
        24   -> FLASH_Lock
        24   -> FLASH_Unlock
      32   BootDrv_ProgramFlash
        32   -> BootApp_SectBuffer_Read
        32   -> FLASH_Lock
        32   -> FLASH_ProgramWord
        32   -> FLASH_Unlock
       0   BootDrv_Reset


   Section sizes:

   Bytes  Function/Label
   -----  --------------
       4  ??DataTable1
       4  ??DataTable1_1
      70  BootDrv_EreaseFlash
     124  BootDrv_ProgramFlash
       2  BootDrv_Reset

 
 204 bytes in section .text
 
 204 bytes of CODE memory

Errors: none
Warnings: none
